{"task_id": "KR_HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \uc22b\uc790 \ubaa9\ub85d\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uc784\uacc4\uac12\ubcf4\ub2e4 \uc11c\ub85c \uac00\uae4c\uc6b4 \ub450 \uc22b\uc790\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"", "entry_point": "has_close_elements", "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"}
{"task_id": "KR_HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" \uc774 \ud568\uc218\uc5d0 \uc785\ub825\ud558\ub294 \ubb38\uc790\uc5f4\uc740 \uc5ec\ub7ec \uac1c\uc758 \uc911\ucca9\ub41c \uad04\ud638 \uadf8\ub8f9\uc774 \ud3ec\ud568\ub41c \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \ubaa9\ud45c\ub294 \ud574\ub2f9 \uadf8\ub8f9\uc744\n    \ubcc4\ub3c4\uc758 \ubb38\uc790\uc5f4\ub85c \ubd84\ub9ac\ud558\uace0 \uadf8 \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \uac01 \uadf8\ub8f9\uc740 \uade0\ud615\uc744 \uc774\ub8e8\uace0(\uac01 \uc5f4\ub9b0 \uc911\uad04\ud638\uac00 \uc62c\ubc14\ub974\uac8c \ub2eb\ud798) \uc11c\ub85c \uc911\ucca9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n    \uc785\ub825 \ubb38\uc790\uc5f4\uc758 \uacf5\ubc31\uc740 \ubb34\uc2dc\ud569\ub2c8\ub2e4.\n    >>> separate_paren_groups('( ) (( ))) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"", "entry_point": "separate_paren_groups", "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"}
{"task_id": "KR_HumanEval/2", "prompt": "def truncate_number(number: float) -> float:\n    \"\"\" \uc591\uc218 \ubd80\ub3d9 \uc18c\uc218\uc810 \uc22b\uc790\uac00 \uc8fc\uc5b4\uc9c0\uba74 \uc815\uc218 \ubd80\ubd84(\uc8fc\uc5b4\uc9c4 \uc22b\uc790\ubcf4\ub2e4 \ud070 \uc815\uc218 \ubd80\ubd84)\uacfc\n    \uc18c\uc218(\ud56d\uc0c1 1\ubcf4\ub2e4 \uc791\uc740 \ub0a8\uc740 \ubd80\ubd84)\uc73c\ub85c \ubd84\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n    \uc22b\uc790\uc758 \uc18c\uc218 \ubd80\ubd84\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"", "entry_point": "truncate_number", "canonical_solution": "    return number % 1.0\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"}
{"task_id": "KR_HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \uc794\uc561\uc774 0\uc73c\ub85c \uc2dc\uc791\ud558\ub294 \uc740\ud589 \uacc4\uc88c\uc758 \uc785\ucd9c\uae08 \uc791\uc5c5 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294 \uc5b4\ub290 \uc2dc\uc810\uc5d0\uc11c \uacc4\uc88c \uc794\uc561\uc774 0 \uc774\ud558\ub85c \ub5a8\uc5b4\uc9c0\ub294\uc9c0 \uac10\uc9c0\ud558\ub294 \uac83\uc774\uba70,\n    \uadf8 \uc2dc\uc810\uc5d0\uc11c \ud568\uc218\ub294 \ucc38\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"", "entry_point": "below_zero", "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"}
{"task_id": "KR_HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \uc785\ub825 \uc22b\uc790 \ubaa9\ub85d\uc5d0 \ub300\ud574 \uc774 \ub370\uc774\ud130 \uc9d1\ud569\uc758 \ud3c9\uade0\uc744 \uc911\uc2ec\uc73c\ub85c \ud3c9\uade0 \uc808\ub300 \ud3b8\ucc28 (MAD)\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    \ud3c9\uade0 \uc808\ub300 \ud3b8\ucc28\ub294 \uac01 \uc694\uc18c\uc640 \uc911\uc2ec\uc810 \uc0ac\uc774\uc758 \ud3c9\uade0 \uc808\ub300 \ucc28\uc774\uc785\ub2c8\ub2e4 (\uc774 \uacbd\uc6b0 \ud3c9\uade0).\n    MAD = \ud3c9\uade0 | x - x_\ud3c9\uade0 |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "entry_point": "mean_absolute_deviation", "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n"}
{"task_id": "KR_HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" \uc785\ub825 \ubaa9\ub85d 'numbers'\uc758 \uc5f0\uc18d\ub41c \ub450 \uc694\uc18c \uc0ac\uc774\uc5d0 \uc22b\uc790 '\uad6c\ubd84 \uae30\ud638'\ub97c \uc0bd\uc785\ud569\ub2c8\ub2e4.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"", "entry_point": "intersperse", "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"}
{"task_id": "KR_HumanEval/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" \uc774 \ud568\uc218\uc5d0 \uc785\ub825\ub418\ub294 \ubb38\uc790\uc5f4\uc740 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \uc911\ucca9\ub41c \uad04\ud638\uc758 \uc5ec\ub7ec \uadf8\ub8f9\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n    \uac01 \uadf8\ub8f9\uc5d0 \ub300\ud574 \uad04\ud638 \uc911\ucca9\uc758 \uac00\uc7a5 \uae4a\uc740 \uc218\uc900\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4 ((()())\ub294 \uc911\ucca9 \uc218\uc900\uc774 \ucd5c\ub300 2\ub2e8\uacc4\uc774\uace0 ((()))\ub294 3\ub2e8\uacc4\uc785\ub2c8\ub2e4.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"}
{"task_id": "KR_HumanEval/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \ubd80\ubd84 \ubb38\uc790\uc5f4\uc744 \ud3ec\ud568\ud558\ub294 \ubb38\uc790\uc5f4\uc5d0 \ub300\ud574\uc11c\ub9cc \uc785\ub825 \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc744 \ud544\ud130\ub9c1\ud569\ub2c8\ub2e4.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"}
{"task_id": "KR_HumanEval/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \uc815\uc218 \ubaa9\ub85d\uc5d0 \ub300\ud574 \ubaa9\ub85d\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \uc815\uc218\uc758 \ud569\uacc4\uc640 \uacf1\uc73c\ub85c \uad6c\uc131\ub41c \ud29c\ud50c\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ube48 \ud569\uacc4\ub294 0\uc774\uace0 \ube48 \uacf1\uc740 1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"", "entry_point": "sum_product", "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"}
{"task_id": "KR_HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \uc815\uc218 \ubaa9\ub85d\uc5d0\uc11c \uc2dc\ud000\uc2a4\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uc21c\uac04\uae4c\uc9c0 \ubc1c\uacac\ub41c \ub864\ub9c1 \ucd5c\ub300 \uc694\uc18c\uc758 \ubaa9\ub85d\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"", "entry_point": "rolling_max", "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"}
{"task_id": "KR_HumanEval/10", "prompt": "def is_palindrome(string: str) -> bool:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc774 \ud314\ub9b0\ub4dc\ub86c\uc778\uc9c0 \ud14c\uc2a4\ud2b8\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \uc81c\uacf5\ub41c \ubb38\uc790\uc5f4\ub85c \uc2dc\uc791\ud558\ub294 \uac00\uc7a5 \uc9e7\uc740 \ud314\ub9b0\ub4dc\ub86c\uc744 \uad6c\ud569\ub2c8\ub2e4.\n    \uc54c\uace0\ub9ac\uc998 \uc544\uc774\ub514\uc5b4\ub294 \uac04\ub2e8\ud569\ub2c8\ub2e4:\n    - \uc81c\uacf5\ub41c \ubb38\uc790\uc5f4\uc758 \uac00\uc7a5 \uae34 \uc811\ubbf8\uc0ac \uc911 \ud314\ub9b0\ub4dc\ub86c\uc778 \uc811\ubbf8\uc0ac\ub97c \ucc3e\uc2b5\ub2c8\ub2e4.\n    - \ud314\ub9b0\ub4dc\ub86c \uc811\ubbf8\uc0ac \uc55e\uc5d0 \uc624\ub294 \ubb38\uc790\uc5f4 \uc811\ub450\uc0ac\uc758 \uc5ed\ubc29\ud5a5 \ubb38\uc790\uc5f4 \ub05d\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "entry_point": "make_palindrome", "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"}
{"task_id": "KR_HumanEval/11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" \uc785\ub825\uc740 1\uacfc 0\uc73c\ub85c\ub9cc \uad6c\uc131\ub41c \ub450 \uac1c\uc758 \ubb38\uc790\uc5f4 a\uc640 b\uc785\ub2c8\ub2e4.\n    \uc774 \uc785\ub825\uc5d0 \ub300\ud574 \uc774\uc9c4 XOR\uc744 \uc218\ud589\ud558\uace0 \uacb0\uacfc\ub97c \ubb38\uc790\uc5f4\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "entry_point": "string_xor", "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"}
{"task_id": "KR_HumanEval/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" \ubb38\uc790\uc5f4 \ubaa9\ub85d \uc911 \uac00\uc7a5 \uae34 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. \uae38\uc774\uac00 \uac19\uc740 \ubb38\uc790\uc5f4\uc774 \uc5ec\ub7ec \uac1c \uc788\ub294 \uacbd\uc6b0\n    \uccab \ubc88\uc9f8 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. \uc785\ub825 \ubaa9\ub85d\uc774 \ube44\uc5b4 \uc788\uc73c\uba74 None\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "entry_point": "longest", "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"}
{"task_id": "KR_HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" \ub450 \uc815\uc218 a\uc640 b\uc758 \ucd5c\ub300\uacf5\uc57d\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"}
{"task_id": "KR_HumanEval/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" \uc785\ub825 \ubb38\uc790\uc5f4\uc758 \uac00\uc7a5 \uc9e7\uc740 \uc811\ub450\uc0ac\ubd80\ud130 \uac00\uc7a5 \uae34 \uc811\ub450\uc0ac\uae4c\uc9c0 \ubaa8\ub4e0 \uc811\ub450\uc0ac \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"", "entry_point": "all_prefixes", "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"}
{"task_id": "KR_HumanEval/15", "prompt": "def string_sequence(n: int) -> str:\n    \"\"\" 0\ubd80\ud130 n\uae4c\uc9c0 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \uc22b\uc790\uac00 \ud3ec\ud568\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "entry_point": "string_sequence", "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"}
{"task_id": "KR_HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\n    \"\"\" \ubb38\uc790\uc5f4\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\uc774 \uba87 \uac1c\uc758 \uace0\uc720 \ubb38\uc790\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub294\uc9c0 \uc54c\uc544\ub0c5\ub2c8\ub2e4.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "entry_point": "count_distinct_characters", "canonical_solution": "    return len(set(string.lower()))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"}
{"task_id": "KR_HumanEval/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" \uc774 \ud568\uc218\uc5d0 \uc785\ub825\ub418\ub294 \uac83\uc740 \uc74c\ud45c\ub97c \ud2b9\uc218 ASCII \ud615\uc2dd\uc73c\ub85c \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\n    \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294 \uc774 \ubb38\uc790\uc5f4\uc744 \uad6c\ubb38 \ubd84\uc11d\ud558\uc5ec \uac01 \uc74c\ud45c\uac00 \uba87 \ubc15\uc790 \ub3d9\uc548 \uc9c0\uc18d\ub418\ub294\uc9c0\uc5d0 \ud574\ub2f9\ud558\ub294 \uc815\uc218 \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n    \ub2e4\uc74c\uc740 \ubc94\ub840\uc785\ub2c8\ub2e4:\n    'o' - \uc804\uccb4 \uc74c\ud45c, 4\ubc15\uc790 \uc9c0\uc18d\n    'o|' - \ubc18\uc74c\ud45c, 2\ubc15\uc790 \uc9c0\uc18d\n    '.|' - \ucffc\ud130 \uc74c\ud45c, \ud55c \ubc15\uc790 \uc9c0\uc18d\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "entry_point": "parse_music", "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"}
{"task_id": "KR_HumanEval/18", "prompt": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \ubd80\ubd84 \ubb38\uc790\uc5f4\uc774 \uc6d0\ubcf8 \ubb38\uc790\uc5f4\uc5d0\uc11c \uba87 \ubc88\uc774\ub098 \ubc1c\uacac\ub420 \uc218 \uc788\ub294\uc9c0 \uad6c\ud569\ub2c8\ub2e4. \uacb9\uce58\ub294 \ub300\uc18c\ubb38\uc790\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "entry_point": "how_many_times", "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"}
{"task_id": "KR_HumanEval/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" \uc785\ub825\uc740 'zero'\ubd80\ud130 'nine'\uae4c\uc9c0 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \uc22b\uc790 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\n    \uc720\ud6a8\ud55c \uc120\ud0dd\uc9c0\ub294 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' \ubc0f 'nine'\uc785\ub2c8\ub2e4.\n    \uc22b\uc790\uac00 \uac00\uc7a5 \uc791\uc740 \uac83\ubd80\ud130 \uac00\uc7a5 \ud070 \uac83\uae4c\uc9c0 \uc815\ub82c\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"}
{"task_id": "KR_HumanEval/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" \uc81c\uacf5\ub41c \uc22b\uc790 \ubaa9\ub85d(\uae38\uc774\uac00 2\uac1c \uc774\uc0c1\uc778)\uc5d0\uc11c \uc11c\ub85c \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc22b\uc790 \ub450 \uac1c\ub97c \uc120\ud0dd\ud558\uc5ec \ubc18\ud658\ud558\uace0\n    \uc21c\uc11c\ub300\ub85c(\uc791\uc740 \uc22b\uc790, \ud070 \uc22b\uc790) \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"", "entry_point": "find_closest_elements", "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"}
{"task_id": "KR_HumanEval/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" \ub450 \uac1c \uc774\uc0c1\uc758 \uc694\uc18c\ub85c \uad6c\uc131\ub41c \uc22b\uc790 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9c0\uba74 \ud574\ub2f9 \ubaa9\ub85d\uc5d0 \uc120\ud615 \ubcc0\ud658\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4,\n    \uac00\uc7a5 \uc791\uc740 \uc22b\uc790\uac00 0\uc774 \ub418\uace0 \uac00\uc7a5 \ud070 \uc22b\uc790\uac00 1\uc774 \ub418\ub3c4\ub85d \uc120\ud615 \ubcc0\ud658\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"", "entry_point": "rescale_to_unit", "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"}
{"task_id": "KR_HumanEval/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" \uc815\uc218\uc5d0 \ub300\ud574\uc11c\ub9cc \ud30c\uc774\uc36c \uac12\uc758 \uc8fc\uc5b4\uc9c4 \ubaa9\ub85d\uc744 \ud544\ud130\ub9c1\ud569\ub2c8\ub2e4.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"", "entry_point": "filter_integers", "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"}
{"task_id": "KR_HumanEval/23", "prompt": "def strlen(string: str) -> int:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "entry_point": "strlen", "canonical_solution": "    return len(string)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"}
{"task_id": "KR_HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \uc22b\uc790 n\uc5d0 \ub300\ud574, n\ubcf4\ub2e4 \uc791\uc740 n\uc744 \uade0\ub4f1\ud558\uac8c \ub098\ub204\ub294 \uac00\uc7a5 \ud070 \uc218\ub97c \uad6c\ud569\ub2c8\ub2e4.\n    >>> largest_divisor(15)\n    5\n    \"\"\"", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"}
{"task_id": "KR_HumanEval/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \uc815\uc218\uc758 \uc18c\uc778\uc218 \ubaa9\ub85d\uc744 \uac00\uc7a5 \uc791\uc740 \uac83\ubd80\ud130 \uac00\uc7a5 \ud070 \uac83 \uc21c\uc11c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uac01 \uc18c\uc778\uc218\ub294 \uc778\uc218\ubd84\ud574\uc5d0\uc11c \ub098\ud0c0\ub098\ub294 \ud69f\uc218\uc5d0 \ud574\ub2f9\ud558\ub294 \ud69f\uc218\ub9cc\ud07c \ub098\uc5f4\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \uc785\ub825\ub41c \uc22b\uc790\ub294 \ubaa8\ub4e0 \uc18c\uc778\uc218\uc758 \uacf1\uacfc \uac19\uc544\uc57c \ud569\ub2c8\ub2e4.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"", "entry_point": "factorize", "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"}
{"task_id": "KR_HumanEval/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" \uc815\uc218 \ubaa9\ub85d\uc5d0\uc11c \ub450 \ubc88 \uc774\uc0c1 \ub098\ud0c0\ub098\ub294 \uc694\uc18c\ub97c \ubaa8\ub450 \uc81c\uac70\ud569\ub2c8\ub2e4.\n    \uc694\uc18c\uc758 \uc21c\uc11c\ub294 \uc785\ub825\uacfc \ub3d9\uc77c\ud558\uac8c \uc720\uc9c0\ud569\ub2c8\ub2e4.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"", "entry_point": "remove_duplicates", "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"}
{"task_id": "KR_HumanEval/27", "prompt": "def flip_case(string: str) -> str:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc5d0 \ub300\ud574 \uc18c\ubb38\uc790\ub97c \ub300\ubb38\uc790\ub85c, \ub300\ubb38\uc790\ub97c \uc18c\ubb38\uc790\ub85c \ub4a4\uc9d1\uc2b5\ub2c8\ub2e4.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"}
{"task_id": "KR_HumanEval/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc744 \ud558\ub098\uc758 \ubb38\uc790\uc5f4\ub85c \uc5f0\uacb0\ud558\uae30\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"", "entry_point": "concatenate", "canonical_solution": "    return ''.join(strings)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"}
{"task_id": "KR_HumanEval/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" \uc8fc\uc5b4\uc9c4 \uc811\ub450\uc0ac\ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc790\uc5f4\uc5d0 \ub300\ud574\uc11c\ub9cc \uc785\ub825 \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc744 \ud544\ud130\ub9c1\ud569\ub2c8\ub2e4.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']]\n    \"\"\"", "entry_point": "filter_by_prefix", "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"}
{"task_id": "KR_HumanEval/30", "prompt": "def get_positive(l: list):\n    \"\"\"\ubaa9\ub85d\uc5d0\uc11c \uc591\uc218\ub9cc \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"", "entry_point": "get_positive", "canonical_solution": "    return [e for e in l if e > 0]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"}
{"task_id": "KR_HumanEval/31", "prompt": "def is_prime(n):\n    \"\"\"\uc8fc\uc5b4\uc9c4 \uc22b\uc790\uac00 \uc18c\uc218\uc774\uba74 \ucc38\uc744 \ubc18\ud658\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uac70\uc9d3\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"}
{"task_id": "KR_HumanEval/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    \uc810 x\uc5d0\uc11c \uacc4\uc218 xs\ub97c \uac00\uc9c4 \ub2e4\ud56d\uc2dd\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4.\n    xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \ub97c \ubc18\ud658\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"  xs\ub294 \ub2e4\ud56d\uc2dd\uc758 \uacc4\uc218\uc785\ub2c8\ub2e4.\n    find_zero\ub294 poly(x) = 0\uc774 \ub418\ub294 x\ub97c \ucc3e\uc2b5\ub2c8\ub2e4.\n    find_zero\ub294 \uc5ec\ub7ec \uac1c\uac00 \uc788\uc5b4\ub3c4 0\uc810\ub9cc \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ub610\ud55c find_zero\ub294 \uc194\ub8e8\uc158\uc744 \ubcf4\uc7a5\ud558\uae30 \ub54c\ubb38\uc5d0 \uacc4\uc218\uac00 \uc9dd\uc218\uc774\uace0\n    0\uc774 \uc544\ub2cc \uacc4\uc218\uac00 \uac00\uc7a5 \ud070 \ubaa9\ub85d xs\ub9cc \ubc1b\uc2b5\ub2c8\ub2e4.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "entry_point": "find_zero", "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"}
{"task_id": "KR_HumanEval/33", "prompt": "def sort_third(l: list):\n    \"\"\"\uc774 \ud568\uc218\ub294 \ub9ac\uc2a4\ud2b8 l\uc744 \ubc1b\uc544, 3\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\ub294 \uc778\ub514\ucf00\uc774\ud130\uc758 \uac12\uc740 l\uacfc \ub3d9\uc77c\ud558\uace0\n    3\uc73c\ub85c \ub098\ub20c \uc218 \uc788\ub294 \uc778\ub514\ucf00\uc774\ud130\uc758 \uac12\uc740 l\uc758 \ud574\ub2f9 \uc778\ub514\ucf00\uc774\ud130\uc758 \uac12\uacfc \uac19\uc9c0\ub9cc \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8 l' \uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "entry_point": "sort_third", "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"}
{"task_id": "KR_HumanEval/34", "prompt": "def unique(l: list):\n    \"\"\"\ubaa9\ub85d\uc5d0\uc11c \uc815\ub82c\ub41c \uace0\uc720 \uc5d8\ub9ac\uba3c\ud2b8 \ubc18\ud658\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"", "entry_point": "unique", "canonical_solution": "    return sorted(list(set(l)))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"}
{"task_id": "KR_HumanEval/35", "prompt": "def max_element(l: list):\n    \"\"\"\ubaa9\ub85d\uc758 \ucd5c\ub300 \uc694\uc18c\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "entry_point": "max_element", "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"}
{"task_id": "KR_HumanEval/36", "prompt": "def fizz_buzz(n: int):\n    \"\"\"\uc22b\uc790 7\uc774 11 \ub610\ub294 13\uc73c\ub85c \ub098\ub20c \uc218 \uc788\ub294 n\ubcf4\ub2e4 \uc791\uc740 \uc815\uc218\ub85c \ub098\ud0c0\ub098\ub294 \ud69f\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"", "entry_point": "fizz_buzz", "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"}
{"task_id": "KR_HumanEval/37", "prompt": "def sort_even(l: list):\n    \"\"\"\uc774 \ud568\uc218\ub294 \ubaa9\ub85d l\uc744 \ubc1b\uc544, \ud640\uc218 \ud45c\uc2dc\uc5d0\uc11c\ub294 l\uacfc \ub3d9\uc77c\ud558\uace0\n    \uc9dd\uc218 \ud45c\uc2dc\uc5d0\uc11c\ub294 l\uc758 \uc9dd\uc218 \ud45c\uc2dc \uac12\uacfc \uac19\uc9c0\ub9cc \uc815\ub82c\ub41c \ubaa9\ub85d l'\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"", "entry_point": "sort_even", "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"}
{"task_id": "KR_HumanEval/38", "prompt": "def encode_cyclic(s: str):\n    \"\"\"\n    \uc138 \uac1c\uc758 \ubb38\uc790 \uadf8\ub8f9\uc744 \uc21c\ud658\ud558\uc5ec \uc778\ucf54\ub529\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    \ud568\uc218\ub294 encode_cyclic \ud568\uc218\ub85c \uc778\ucf54\ub529\ub41c \uc785\ub825 \ubb38\uc790\uc5f4\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \ub514\ucf54\ub529\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "decode_cyclic", "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"}
{"task_id": "KR_HumanEval/39", "prompt": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib\ub294 \ud53c\ubcf4\ub098\uce58\uc218\uc778 n \ubc88\uc9f8 \uc22b\uc790\ub97c \ubc18\ud658\ud558\uba70, \uc774 \uc22b\uc790\ub3c4 \uc18c\uc218\uc785\ub2c8\ub2e4.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"", "entry_point": "prime_fib", "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"}
{"task_id": "KR_HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    \uc815\uc218 \ubaa9\ub85d\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n    \ubaa9\ub85d\uc5d0 \ud569\uc774 0\uc778 \ubcc4\uac1c\uc758 \uc694\uc18c\uac00 \uc138 \uac1c \uc788\uc73c\uba74 True\ub97c \ubc18\ud658\ud558\uace0,\n    \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"", "entry_point": "triples_sum_to_zero", "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"}
{"task_id": "KR_HumanEval/41", "prompt": "def car_race_collision(n: int):\n    \"\"\"\n    \uc644\ubcbd\ud558\uac8c \uc9c1\uc120\uc778 \ubb34\ud55c\ud788 \uae34 \ub3c4\ub85c\ub97c \uc0c1\uc0c1\ud574 \ubcf4\uc138\uc694.\n    N\ub300\uc758 \uc790\ub3d9\ucc28\uac00 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc8fc\ud589\ud558\uace0 \uc788\uace0, \ub3d9\uc2dc\uc5d0 \ub610 \ub2e4\ub978 N\ub300\uc758 \uc790\ub3d9\ucc28\uac00\n    \uac00 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc8fc\ud589\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.   \ub450 \uc138\ud2b8\uc758 \uc790\ub3d9\ucc28\ub294 \uc11c\ub85c \ub9e4\uc6b0 \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc11c\ub85c \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4.  \ubaa8\ub4e0 \uc790\ub3d9\ucc28\ub294 \uac19\uc740 \uc18d\ub3c4\ub85c \uc6c0\uc9c1\uc785\ub2c8\ub2e4.  \ub450 \ub300\uc758 \uc790\ub3d9\ucc28\uac00 \ucda9\ub3cc\ud55c\ub2e4\uace0 \ud569\ub2c8\ub2e4.\n    \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \ucc28\uac00 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \ucc28\uc5d0 \ubd80\ub52a\ud788\uba74 \ucda9\ub3cc\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.\n    \ud558\uc9c0\ub9cc \uc790\ub3d9\ucc28\ub294 \ubb34\ud55c\ud788 \ud2bc\ud2bc\ud558\uace0 \uac15\ud558\uae30 \ub54c\ubb38\uc5d0, \uadf8 \uacb0\uacfc \ub450 \uc790\ub3d9\ucc28\ub294 \ub9c8\uce58\n    \ub9c8\uce58 \ucda9\ub3cc\ud558\uc9c0 \uc54a\uc740 \uac83\ucc98\ub7fc \uada4\uc801\uc744 \ub530\ub77c \uacc4\uc18d \uc6c0\uc9c1\uc785\ub2c8\ub2e4.\n\n    \uc774 \ud568\uc218\ub294 \uc774\ub7ec\ud55c \ucda9\ub3cc \ud69f\uc218\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "car_race_collision", "canonical_solution": "    return n**2\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"}
{"task_id": "KR_HumanEval/42", "prompt": "def incr_list(l: list):\n    \"\"\"\uc694\uc18c\uac00 1\uc529 \uc99d\uac00\ub41c \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "entry_point": "incr_list", "canonical_solution": "    return [(e + 1) for e in l]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"}
{"task_id": "KR_HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero\ub294 \uc815\uc218 \ubaa9\ub85d\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n    \ubaa9\ub85d\uc5d0 \ud569\uc774 0\uc774 \ub418\ub294 \ubcc4\uac1c\uc758 \uc694\uc18c\uac00 \ub450 \uac1c \uc788\uc73c\uba74 True\ub97c \ubc18\ud658\ud558\uace0,\n    \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"}
{"task_id": "KR_HumanEval/44", "prompt": "def change_base(x: int, base: int):\n    \"\"\"\uc785\ub825 \uc22b\uc790 x\ub97c \uc8fc\uc5b4\uc9c4 \uc9c4\ubc95\uc73c\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4.\n    \ubcc0\ud658 \ud6c4 \ubb38\uc790\uc5f4 \ud45c\ud604\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. \uc9c4\ubc95 \uc22b\uc790\ub294 10\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"", "entry_point": "change_base", "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"}
{"task_id": "KR_HumanEval/45", "prompt": "def triangle_area(a, h):\n    \"\"\"\ud55c \ubcc0\uc758 \uae38\uc774\uc640 \ub192\uc774\uac00 \uc8fc\uc5b4\uc9c0\uba74 \uc0bc\uac01\ud615\uc758 \ub113\uc774\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"", "entry_point": "triangle_area", "canonical_solution": "    return a * h / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"}
{"task_id": "KR_HumanEval/46", "prompt": "def fib4(n: int):\n    \"\"\"Fib4 \uc218\uc5f4\uc740 \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uacfc \uc720\uc0ac\ud55c \uc218\uc5f4\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    fib4 \uc22b\uc790 \uc2dc\ud000\uc2a4\uc758 n\ubc88\uc9f8 \uc694\uc18c\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.  \uc7ac\uadc0\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\uc138\uc694.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"", "entry_point": "fib4", "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"}
{"task_id": "KR_HumanEval/47", "prompt": "def median(l: list):\n    \"\"\"\ubaa9\ub85d\uc5d0 \uc788\ub294 \uc694\uc18c\uc758 \uc911\uc559\uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"}
{"task_id": "KR_HumanEval/48", "prompt": "def is_palindrome(text: str):\n    \"\"\"\n    \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc774 \ud314\ub9b0\ub4dc\ub86c\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"", "entry_point": "is_palindrome", "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"}
{"task_id": "KR_HumanEval/49", "prompt": "def modp(n: int, p: int):\n    \"\"\"2^n \ubaa8\ub4c8\ub85c p\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4 (\uc22b\uc790\uc5d0 \uc720\uc758\ud558\uc138\uc694).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    3 >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "entry_point": "modp", "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"}
{"task_id": "KR_HumanEval/50", "prompt": "def encode_shift(s: str):\n    \"\"\"\n    \ubaa8\ub4e0 \ubb38\uc790\ub97c \uc54c\ud30c\ubcb3\uc5d0\uc11c 5\uc529 \uc774\ub3d9\ud558\uc5ec \uc778\ucf54\ub529\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    encode_shift \ud568\uc218\ub85c \uc778\ucf54\ub529\ub41c \uc785\ub825 \ubb38\uc790\uc5f4\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \ub514\ucf54\ub529\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "decode_shift", "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"}
{"task_id": "KR_HumanEval/51", "prompt": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels\ub294 \ubb38\uc790\uc5f4\uc744 \ubc1b\uc544 \ubaa8\uc74c\uc774 \uc5c6\ub294 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\nghijklm\")\n    'bcdf\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"", "entry_point": "remove_vowels", "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"}
{"task_id": "KR_HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\n    \"\"\"\ubaa9\ub85d l\uc758 \ubaa8\ub4e0 \uc22b\uc790\uac00 \uc784\uacc4\uac12 t\ubcf4\ub2e4 \uc791\uc73c\uba74 True\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "entry_point": "below_threshold", "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"}
{"task_id": "KR_HumanEval/53", "prompt": "def add(x: int, y: int):\n    \"\"\"\ub450 \uac1c\uc758 \uc22b\uc790 x\uc640 y\ub97c \ub354\ud558\uae30\n    >>> add(2, 3)\n    5\n    5 >>> add(5, 7)\n    12\n    \"\"\"", "entry_point": "add", "canonical_solution": "    return x + y\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"}
{"task_id": "KR_HumanEval/54", "prompt": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    \ub450 \ub2e8\uc5b4\uc758 \ubb38\uc790\uac00 \uac19\uc740\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    true >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzddddabc')\n    False\n    \"\"\"", "entry_point": "same_chars", "canonical_solution": "    return set(s0) == set(s1)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"}
{"task_id": "KR_HumanEval/55", "prompt": "def fib(n: int):\n    \"\"\"n\ubc88\uc9f8 \ud53c\ubcf4\ub098\uce58 \uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "entry_point": "fib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"}
{"task_id": "KR_HumanEval/56", "prompt": "def correct_bracketing(brackets: str):\n    \"\"\" \uad04\ud638\ub294 \"<\" \ubc0f \">\"\uc758 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\n    \ubaa8\ub4e0 \uc5ec\ub294 \ub300\uad04\ud638\uc5d0 \ud574\ub2f9\ud558\ub294 \ub2eb\ub294 \ub300\uad04\ud638\uac00 \uc788\uc73c\uba74 True\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"}
{"task_id": "KR_HumanEval/57", "prompt": "def monotonic(l: list):\n    \"\"\"\ubaa9\ub85d \uc694\uc18c\uac00 \ub2e8\uc870\ub86d\uac8c \uc99d\uac00\ud558\uac70\ub098 \uac10\uc18c\ud558\ub294 \uacbd\uc6b0 True\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"}
{"task_id": "KR_HumanEval/58", "prompt": "def common(l1: list, l2: list):\n    \"\"\"\ub450 \ubaa9\ub85d\uc5d0 \ub300\ud574 \uc815\ub82c\ub41c \uace0\uc720 \uacf5\ud1b5 \uc694\uc18c\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"}
{"task_id": "KR_HumanEval/59", "prompt": "def largest_prime_factor(n: int):\n    \"\"\"n\uc758 \ucd5c\ub300 \uc18c\uc778\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. n\uc774 1\ubcf4\ub2e4 \ud06c\uace0 \uc18c\uc218\uac00 \uc544\ub2c8\ub77c\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "entry_point": "largest_prime_factor", "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"}
{"task_id": "KR_HumanEval/60", "prompt": "def sum_to_n(n: int):\n    \"\"\"sum_to_n\uc740 1\ubd80\ud130 n\uae4c\uc9c0\uc758 \uc22b\uc790\ub97c \ud569\uc0b0\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "entry_point": "sum_to_n", "canonical_solution": "    return sum(range(n + 1))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"}
{"task_id": "KR_HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\n    \"\"\" brackets\ub294 \u201c(\u201d \uc640 \u201c)\u201d\uc758 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \uc5ec\ub294 \uad04\ud638\uc5d0 \ud574\ub2f9\ud558\ub294 \ub2eb\ub294 \uad04\ud638\uac00 \uc788\uc73c\uba74 True\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"(\")\")\n    True\n    >>> correct_bracketing(\"((()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"}
{"task_id": "KR_HumanEval/62", "prompt": "def derivative(xs: list):\n    \"\"\" xs\ub294 \ub2e4\ud56d\uc2dd\uc758 \uacc4\uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     \uc774 \ub2e4\ud56d\uc2dd\uc758 \ub3c4\ud568\uc218\ub97c \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"", "entry_point": "derivative", "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"}
{"task_id": "KR_HumanEval/63", "prompt": "def fibfib(n: int):\n    \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\ub294 \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uacfc \uc720\uc0ac\ud55c \uc218\uc5f4\uc785\ub2c8\ub2e4:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    fibfib \uc218\uc5f4\uc758 n\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "entry_point": "fibfib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"}
{"task_id": "KR_HumanEval/64", "prompt": "FIX = \"\"\"\n\ud14c\uc2a4\ud2b8 \uc0ac\ub840\ub97c \ub354 \ucd94\uac00\ud558\uc138\uc694.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"\ub2e8\uc5b4\ub97c \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc544\n    \ubb38\uc790\uc5f4\uc5d0 \uc788\ub294 \ubaa8\uc74c\uc758 \uc218\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218 vowels_count\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uc774 \uacbd\uc6b0 \ubaa8\uc74c\uc740 'a', 'e', 'i', 'o', 'u'\uc785\ub2c8\ub2e4.\n    \uc5ec\uae30\uc11c 'y'\ub3c4 \ubaa8\uc74c\uc774\uc9c0\ub9cc \uc8fc\uc5b4\uc9c4 \ub2e8\uc5b4\uc758 \ub05d\uc5d0 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ubaa8\uc74c\uc774 \ub429\ub2c8\ub2e4.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "entry_point": "vowels_count", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/65", "prompt": "def circular_shift(x, shift):\n    \"\"\"\uc815\uc218 x\uc758 \uc790\ub9bf\uc218\ub97c \uc6d0\ud615 \uc2dc\ud504\ud2b8\ud558\uace0, \uc2dc\ud504\ud2b8\ub9cc\ud07c \uc624\ub978\ucabd\uc73c\ub85c \uc790\ub9bf\uc218\ub97c \uc2dc\ud504\ud2b8\ud55c \ub2e4\uc74c \uacb0\uacfc\ub97c \ubb38\uc790\uc5f4\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc2dc\ud504\ud2b8 > \uc790\ub9bf\uc218\uc778 \uacbd\uc6b0 \uc790\ub9bf\uc218\ub97c \ubc18\ub300\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "entry_point": "circular_shift", "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/66", "prompt": "def digitSum(s):\n    \"\"\"\uacfc\uc81c\n    \ubb38\uc790\uc5f4\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc544 \uc0c1\uc704 \ubb38\uc790\ub9cc ASCII \ucf54\ub4dc\uc758 \ud569\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "entry_point": "digitSum", "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"}
{"task_id": "KR_HumanEval/67", "prompt": "def fruit_distribution(s,n):\n    \"\"\"\n    \uc774 \ubb38\uc81c\uc5d0\uc11c\ub294 \uacfc\uc77c \ubc14\uad6c\ub2c8\uc5d0 \ub4e4\uc5b4 \uc788\ub294 \uc0ac\uacfc\uc640 \uc624\ub80c\uc9c0\uc758 \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uc774 \ubc14\uad6c\ub2c8\uc5d0\ub294 \uc0ac\uacfc, \uc624\ub80c\uc9c0, \ub9dd\uace0 \uacfc\uc77c\uc774 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc624\ub80c\uc9c0\uc640 \uc0ac\uacfc\uc758 \ucd1d \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uacfc \ubc14\uad6c\ub2c8\uc5d0 \uc788\ub294 \uacfc\uc77c\uc758 \ucd1d \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \uc815\uc218\uac00 \uc8fc\uc5b4\uc9c0\uba74\n    \ubc14\uad6c\ub2c8\uc5d0 \uc788\ub294 \ub9dd\uace0 \uacfc\uc77c\uc758 \uac1c\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4:\n    fruit_distribution(\"\uc0ac\uacfc 5\uac1c, \uc624\ub80c\uc9c0 6\uac1c\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"\uc0ac\uacfc 0\uac1c, \uc624\ub80c\uc9c0 1\uac1c\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"\uc0ac\uacfc 2\uac1c\uc640 \uc624\ub80c\uc9c0 3\uac1c\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"\uc0ac\uacfc 100\uac1c\uc640 \uc624\ub80c\uc9c0 1\uac1c\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "entry_point": "fruit_distribution", "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"}
{"task_id": "KR_HumanEval/68", "prompt": "def pluck(arr):\n    \"\"\"\n    \"\uc74c\uc218\uac00 \uc544\ub2cc \uc815\uc218 \ub178\ub4dc\uac00 \uc788\ub294 \ud2b8\ub9ac\uc758 \uac00\uc9c0\ub97c \ub098\ud0c0\ub0b4\ub294 \ubc30\uc5f4\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c,\n    \ub178\ub4dc \uc911 \ud558\ub098\ub97c \ubf51\uc544 \ubc18\ud658\ud558\ub294 \uac83\uc774 \uacfc\uc81c\uc785\ub2c8\ub2e4.\n    \ubf51\uc740 \ub178\ub4dc\ub294 \uac00\uc7a5 \uc791\uc740 \uc9dd\uc218 \uac12\uc744 \uac00\uc9c4 \ub178\ub4dc\uc5ec\uc57c \ud569\ub2c8\ub2e4.\n    \ub3d9\uc77c\ud55c \ucd5c\uc18c \uc9dd\uc218 \uac12\uc744 \uac00\uc9c4 \ub178\ub4dc\uac00 \uc5ec\ub7ec \uac1c \ubc1c\uacac\ub418\uba74 \uac00\uc7a5 \uc791\uc740 \uc778\ub371\uc2a4\ub97c \uac00\uc9c4 \ub178\ub4dc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \ubf51\uc740 \ub178\ub4dc\ub294 [smalest_value, \ud574\ub2f9 \uc778\ub371\uc2a4]\ub77c\ub294 \ubaa9\ub85d\uc73c\ub85c \ubc18\ud658\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4,\n    \uc9dd\uc218 \uac12\uc774 \uc5c6\uac70\ub098 \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc774 \ube44\uc5b4 \uc788\uc73c\uba74 []\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        \uc124\uba85: 2\ub294 \uc9dd\uc218\uac12\uc774 \uac00\uc7a5 \uc791\uace0, 2\ub294 \uc778\ub371\uc2a4\uac00 \uac00\uc7a5 \uc791\uc2b5\ub2c8\ub2e4.\n\n    \uc608\uc81c 2:\n        \uc785\ub825: [1,2,3]\n        \ucd9c\ub825: [2, 1]\n        \uc124\uba85: 2\ub294 \uc9dd\uc218 \uac12\uc774 \uac00\uc7a5 \uc791\uace0, 2\ub294 \uc778\ub371\uc2a4\uac00 \uac00\uc7a5 \uc791\uc2b5\ub2c8\ub2e4.\n\n    \uc608\uc81c 3:\n        \uc785\ub825: []\n        Output: []\n    \n    \uc608\uc81c 4:\n        \uc785\ub825 [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        \uc124\uba85: 0\uc774 \uac00\uc7a5 \uc791\uc740 \uac12\uc774\uc9c0\ub9cc 0\uc774 \ub450 \uac1c \uc788\uc2b5\ub2c8\ub2e4,\n                     \ub530\ub77c\uc11c \uc778\ub371\uc2a4\uac00 \uac00\uc7a5 \uc791\uc740 \uccab \ubc88\uc9f8 0\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4.\n\n    \uc81c\uc57d \uc870\uac74:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "entry_point": "pluck", "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"}
{"task_id": "KR_HumanEval/69", "prompt": "def search(lst):\n    \"\"\"\n    \ube44\uc5b4 \uc788\uc9c0 \uc54a\uc740 \uc591\uc758 \uc815\uc218 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    0\ubcf4\ub2e4 \ud06c\uace0 \uc815\uc218 \uc790\uccb4\uc758 \uac12\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc740 \ube48\ub3c4\ub97c \uac16\ub294 \uac00\uc7a5 \ud070 \uc815\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc815\uc218\uc758 \ube48\ub3c4\ub294 \ubaa9\ub85d\uc5d0 \ub098\ud0c0\ub098\ub294 \ud69f\uc218\uc785\ub2c8\ub2e4.\n    \uadf8\ub7ec\ud55c \uac12\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 -1\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"", "entry_point": "search", "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"}
{"task_id": "KR_HumanEval/70", "prompt": "def strange_sort_list(lst):\n    \"\"\"\n    \uc815\uc218 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uc774\uc0c1\ud55c \uc21c\uc11c\ub85c \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc774\uc0c1\ud55c \uc815\ub82c\uc740 \ucd5c\uc18c\uac12\ubd80\ud130 \uc2dc\uc791\ud574\uc11c \ub098\uba38\uc9c0 \uc815\uc218\uc758 \ucd5c\ub300\uac12,\n    \ub098\uba38\uc9c0 \uc815\uc218\uc758 \ucd5c\ub300\uac12, \ucd5c\uc18c\uac12 \uc21c\uc73c\ub85c \uc815\ub82c\ud558\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4.\n\n    \uc608\uc2dc\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/71", "prompt": "def triangle_area(a, b, c):\n    \"\"\"\n    \uc0bc\uac01\ud615\uc758 \uc138 \ubcc0\uc758 \uae38\uc774\uac00 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uc138 \ubcc0\uc774 \uc720\ud6a8\ud55c \uc0bc\uac01\ud615\uc744 \ud615\uc131\ud558\uba74 \uc18c\uc218\uc810 \uc774\ud558 2\uc790\ub9ac\ub85c \ubc18\uc62c\ub9bc\ud55c \uc0bc\uac01\ud615\uc758 \uba74\uc801\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 -1\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ub450 \ubcc0\uc758 \ud569\uc774 \uc138 \ubc88\uc9f8 \ubcc0\ubcf4\ub2e4 \ud074 \ub54c \uc720\ud6a8\ud55c \uc0bc\uac01\ud615\uc774 \ub429\ub2c8\ub2e4.\n    \uc608\uc2dc:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"", "entry_point": "triangle_area", "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"}
{"task_id": "KR_HumanEval/72", "prompt": "def will_it_fly(q,w):\n    \"\"\"\n    \ubb3c\uccb4 q\uac00 \ub0a0\uc544\uac08 \uacbd\uc6b0 True\ub97c \ubc18\ud658\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uac1d\uccb4 q\ub294 \uade0\ud615\uc774 \uc7a1\ud600 \uc788\uace0(\ud314\ub9b0\ub4dc\ub85c\ubbf9 \ub9ac\uc2a4\ud2b8) \uadf8 \uc694\uc18c\uc758 \ud569\uc774 \uac00\ub2a5\ud55c \ucd5c\ub300 \uac00\uc911\uce58 w\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc73c\uba74 \ub0a0\uc544\uac11\ub2c8\ub2e4.\n\n    \uc608\uc2dc:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2\uac00 \uac00\ub2a5\ud55c \ucd5c\ub300 \uac00\uc911\uce58\ubcf4\ub2e4 \uc791\uc9c0\ub9cc \ubd88\uade0\ud615\uc785\ub2c8\ub2e4.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # \uade0\ud615\uc740 \ub9de\uc9c0\ub9cc 3+2+3\uc774 \uac00\ub2a5\ud55c \ucd5c\ub300 \uac00\uc911\uce58\ubcf4\ub2e4 \ud07d\ub2c8\ub2e4.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3\uc774 \uac00\ub2a5\ud55c \ucd5c\ub300 \uac00\uc911\uce58\ubcf4\ub2e4 \uc791\uc73c\uba70, \uade0\ud615\uc774 \ub9de\uc2b5\ub2c8\ub2e4.\n\n    will_it_fly([3], 5) \u279e True\n    # 3\uc774 \uac00\ub2a5\ud55c \ucd5c\ub300 \uac00\uc911\uce58\ubcf4\ub2e4 \uc791\uc73c\uba70 \uade0\ud615\uc774 \ub9de\uc2b5\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "will_it_fly", "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"}
{"task_id": "KR_HumanEval/73", "prompt": "def smallest_change(arr):\n    \"\"\"\n    \uc815\uc218\uc758 \ubc30\uc5f4 \ubc30\uc5f4\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \ubc30\uc5f4\uc744 \ud314\ub9b0\ub4dc\ub86c \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574 \ubcc0\uacbd\ud574\uc57c \ud558\ub294 \ucd5c\uc18c \uc6d0\uc18c \uc218\ub97c \uad6c\ud569\ub2c8\ub2e4.\n    \ud314\ub9b0\ub4dc\ub85c\ubbf9 \ubc30\uc5f4\uc740 \uc55e\ub4a4\ub85c \ub611\uac19\uc774 \uc77d\ud788\ub294 \ubc30\uc5f4\uc785\ub2c8\ub2e4. \ud55c \ubc88\uc758 \ubcc0\uacbd\uc73c\ub85c \ud55c \uc694\uc18c\ub97c \ub2e4\ub978 \uc694\uc18c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"", "entry_point": "smallest_change", "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"}
{"task_id": "KR_HumanEval/74", "prompt": "def total_match(lst1, lst2):\n    \"\"\"\n    \ub450 \uac1c\uc758 \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc744 \ubc1b\uc544\ub4e4\uc774\uace0 \ub2e4\uc74c\uacfc \uac19\uc740 \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \ubaa9\ub85d\uc758 \ubaa8\ub4e0 \ubb38\uc790\uc5f4\uc758 \ucd1d \ubb38\uc790 \uc218\uac00 \ub2e4\ub978 \ubaa9\ub85d\ubcf4\ub2e4 \uc801\uc740 \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n\n    \ub450 \ubaa9\ub85d\uc758 \ubb38\uc790 \uc218\uac00 \uac19\uc73c\uba74 \uccab \ubc88\uc9f8 \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"", "entry_point": "total_match", "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"}
{"task_id": "KR_HumanEval/75", "prompt": "def is_multiply_prime(a):\n    \"\"\"\uc8fc\uc5b4\uc9c4 \uc22b\uc790\uac00 \uc18c\uc218 3\uc758 \uacf1\uc774\uba74 \ucc38\uc744 \ubc18\ud658\ud558\uace0 \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uac70\uc9d3\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    (a)\uac00 100\ubcf4\ub2e4 \uc791\ub2e4\ub294 \uac83\uc744 \uc54c\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc608\uc81c\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "entry_point": "is_multiply_prime", "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"}
{"task_id": "KR_HumanEval/76", "prompt": "def is_simple_power(x, n):\n    \"\"\"\uc5ec\ub7ec\ubd84\uc758 \uacfc\uc81c\ub294 \uc22b\uc790 x\uac00 n\uc758 \uac70\ub4ed\uc81c\uacf1\uc778 \uacbd\uc6b0 \ucc38\uc744 \ubc18\ud658\ud558\uace0 \uadf8 \uc678\uc758 \uacbd\uc6b0\uc5d0\ub294 \uac70\uc9d3\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    n**int=x\uc778 \uacbd\uc6b0 x\ub294 n\uc758 \uac70\ub4ed\uc81c\uacf1\uc785\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    IS_SIMPLE_POWER(3, 1) => FALSE\n    IS_SIMPLE_POWER(5, 3) => FALSE\n    \"\"\"", "entry_point": "is_simple_power", "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/77", "prompt": "def iscube(a):\n    \"\"\"\n    \uc815\uc218 a\ub97c \ubc1b\uc544 \uc774 \uc815\uc218\uac00 \uc5b4\ub5a4 \uc815\uc218\uc758 \uc138\uc81c\uacf1\uc778 \uacbd\uc6b0 True\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \ucc38\uace0: \uc785\ub825\uc774 \ud56d\uc0c1 \uc720\ud6a8\ud558\ub2e4\uace0 \uac00\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc608\uc2dc\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"", "entry_point": "iscube", "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"}
{"task_id": "KR_HumanEval/78", "prompt": "def hex_key(num):\n    \"\"\"16\uc9c4\uc218\ub97c \ubb38\uc790\uc5f4\ub85c \ubc1b\uc544 \uc18c\uc218\uc778 16\uc9c4\uc218 \uc790\ub9bf\uc218\ub97c \uc138\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\ub77c\ub294 \uacfc\uc81c\uac00 \uc8fc\uc5b4\uc84c\uc2b5\ub2c8\ub2e4\n    (\uc18c\uc218 \ub610\ub294 \uc18c\uc218\ub294 \ub450 \uac1c\uc758 \uc791\uc740 \uc790\uc5f0\uc218\uc758 \uacf1\uc774 \uc544\ub2cc 1\ubcf4\ub2e4 \ud070 \uc790\uc5f0\uc218\uc785\ub2c8\ub2e4).\n    16\uc9c4\uc218\ub294 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\uc774\uba70\n    \uc18c\uc218\ub294 2, 3, 5, 7, 11, 13, 17,...\uc785\ub2c8\ub2e4.\n    \ub530\ub77c\uc11c 2, 3, 5, 7, B(=\uc18c\uc218 11), D(=\uc18c\uc218 13)\uc758 \uc22b\uc790\ub97c \uacb0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ucc38\uace0: \uc785\ub825\uc774 \ud56d\uc0c1 \uc815\ud655\ud558\uac70\ub098 \ube48 \ubb38\uc790\uc5f4\uc774\ub77c\uace0 \uac00\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4,\n    \uadf8\ub9ac\uace0, \uae30\ud638 A,B,C,D,E,F\ub294 \ud56d\uc0c1 \ub300\ubb38\uc790\uc785\ub2c8\ub2e4.\n    \uc608\uc2dc:\n    num = \"AB\"\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    num = \"1077E\"\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 2\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    num = \"ABED1A33\"\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 4\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    num = \"123456789ABCDEF0\"\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 6\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    num = \"2020\"\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 2\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "hex_key", "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"}
{"task_id": "KR_HumanEval/79", "prompt": "def decimal_to_binary(decimal):\n    \"\"\"\uc2ed\uc9c4\uc218 \ud615\uc2dd\uc758 \uc22b\uc790\uac00 \uc8fc\uc5b4\uc9c0\uba70, \uc774\ub97c \uc774\uc9c4 \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774 \uacfc\uc81c\uc785\ub2c8\ub2e4.\n    \uc774 \ud568\uc218\ub294 \uac01 \ubb38\uc790\uac00 \uc774\uc9c4\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ubb38\uc790\uc5f4\uc758 \uac01 \ubb38\uc790\ub294 '0' \ub610\ub294 '1'\uc774 \ub429\ub2c8\ub2e4.\n\n    \ubb38\uc790\uc5f4\uc758 \uc2dc\uc791\uacfc \ub05d\uc5d0 'db' \ubb38\uc790\uac00 \ucd94\uac00\ub85c \uba87 \uac1c \ub354 \uc788\uc2b5\ub2c8\ub2e4.\n    \ucd94\uac00 \ubb38\uc790\ub294 \ud615\uc2dd\uc5d0 \ub3c4\uc6c0\uc744 \uc8fc\uae30 \uc704\ud55c \uac83\uc785\ub2c8\ub2e4.\n\n    \uc608\uc2dc\n    decimal_to_binary(15) # \"db1111db\" \ubc18\ud658\n    decimal_to_binary(32) # \"db100000db\" \ubc18\ud658\n    \"\"\"", "entry_point": "decimal_to_binary", "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/80", "prompt": "def is_happy(s):\n    \"\"\"\ubb38\uc790\uc5f4 s\uac00 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294 \ubb38\uc790\uc5f4\uc774 \ud589\ubcf5\ud55c\uc9c0 \uc544\ub2cc\uc9c0\ub97c \ud655\uc778\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uac00 3 \uc774\uc0c1\uc774\uace0 \uc5f0\uc18d\ub41c 3\uac1c\uc758 \ubb38\uc790\uac00 \ubaa8\ub450 \uad6c\ubcc4\ub418\ub294 \uacbd\uc6b0 \ubb38\uc790\uc5f4\uc740 \ud589\ubcf5\ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"}
{"task_id": "KR_HumanEval/81", "prompt": "def numerical_letter_grade(grades):\n    \"\"\"\ud559\uae30 \ub9c8\uc9c0\ub9c9 \uc8fc\uc774\uace0 \uad50\uc0ac\ub294 \ud559\uc0dd\ub4e4\uc5d0\uac8c \uc131\uc801\uc744 \ubd80\uc5ec\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc120\uc0dd\ub2d8\uc740 \ucc44\uc810\uc744 \uc704\ud574 \uc790\uc2e0\ub9cc\uc758 \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n    \ubb38\uc81c\ub294 \ucc44\uc810\uc5d0 \uc0ac\uc6a9\ud55c \ucf54\ub4dc\ub97c \uc783\uc5b4\ubc84\ub838\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \uc120\uc0dd\ub2d8\uc774 \uc77c\ubd80 \ud559\uc0dd\uc758 \uc131\uc801 \ubaa9\ub85d\uc744 \uc8fc\uc168\ub294\ub370, \uc774 \ud559\uc0dd\uc758 \uc131\uc801\uc744 \ucd9c\ub825\ud560 \uc218 \uc788\ub294 \ud568\uc218 \ub2e4\uc74c \ud45c\ub97c \uc0ac\uc6a9\ud558\uc5ec\n    \ubb38\uc790 \uc131\uc801 \ubaa9\ub85d\uc744 \ucd9c\ub825\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub97c \uc791\uc131\ud574\uc57c \ud569\ub2c8\ub2e4:\n             GPA | \ubb38\uc790 \uc131\uc801\n              4.0 A+\n            > 3.7 A\n            > 3.3 A-\n            > 3.0 B+\n            > 2.7 B\n            > 2.3 B-\n            > 2.0 C+\n            > 1.7 C\n            > 1.3 C-\n            > 1.0 D+\n            > 0.7 D\n            > 0.0 D-\n              0.0 E\n    \n\n    \uc608\uc2dc\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "entry_point": "numerical_letter_grade", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/82", "prompt": "def prime_length(string):\n    \"\"\"\ubb38\uc790\uc5f4\uc744 \ubc1b\uc544 \ubb38\uc790\uc5f4 \uae38\uc774\uac00 \uc18c\uc218\uc774\uba74 True\ub97c \ubc18\ud658\ud558\uace0 \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "entry_point": "prime_length", "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"}
{"task_id": "KR_HumanEval/83", "prompt": "def starts_one_ends(n):\n    \"\"\"\n    \uc591\uc758 \uc815\uc218 n\uc774 \uc8fc\uc5b4\uc9c0\uba74 1\ub85c \uc2dc\uc791\ud558\uac70\ub098 \ub05d\ub098\ub294 n\uc790\ub9ac \uc591\uc758 \uc815\uc218\uc758 \uac1c\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "starts_one_ends", "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/84", "prompt": "def solve(N):\n    \"\"\"\uc591\uc758 \uc815\uc218 N\uc774 \uc8fc\uc5b4\uc9c0\uba74, \uadf8 \uc790\ub9bf\uc218\uc758 \ucd1d\ud569\uc744 2\uc9c4\ubc95\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \n    \uc608\uc81c\n        N = 1000\uc758 \uacbd\uc6b0 \uc790\ub9bf\uc218\uc758 \ud569\uacc4\ub294 1\uc774\ubbc0\ub85c \ucd9c\ub825\uc740 \"1\"\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n        N = 150\uc758 \uacbd\uc6b0 \uc790\ub9bf\uc218\uc758 \ud569\uacc4\ub294 6\uc774 \ub418\uace0 \ucd9c\ub825\uc740 \"110\"\uc774 \ub429\ub2c8\ub2e4.\n        N = 147\uc758 \uacbd\uc6b0 \uc790\ub9bf\uc218 \ud569\uacc4\ub294 12\uac00 \ub418\uace0 \ucd9c\ub825\uc740 \"1100\"\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \n    \ubcc0\uc218\n        @N \uc815\uc218\n             \uc81c\uc57d \uc870\uac74: 0 \u2264 N \u2264 10000.\n    \ucd9c\ub825:\n         \uc774\uc9c4\uc218 \ubb38\uc790\uc5f4\n    \"\"\"", "entry_point": "solve", "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"}
{"task_id": "KR_HumanEval/85", "prompt": "def add(lst):\n    \"\"\"\ube44\uc5b4 \uc788\uc9c0 \uc54a\uc740 \uc815\uc218 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c \ud640\uc218 \uc778\ub371\uc2a4\uc5d0 \uc788\ub294 \uc9dd\uc218 \uc694\uc18c\ub97c \ub354\ud569\ub2c8\ub2e4.\n\n\n    \uc608\uc81c\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"", "entry_point": "add", "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"}
{"task_id": "KR_HumanEval/86", "prompt": "def anti_shuffle(s):\n    \"\"\"\n    \ubb38\uc790\uc5f4\uc744 \ubc1b\uc544 \uc815\ub82c\ub41c \ubc84\uc804\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uc815\ub82c\ub41c \ubc84\uc804\uc758 \ubb38\uc790\uc5f4\uc740 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ubaa8\ub4e0 \ub2e8\uc5b4\uac00 ascii \uac12\uc744 \uae30\uc900\uc73c\ub85c\n    \uc624\ub984\ucc28\uc21c\uc73c\ub85c \ubc30\uc5f4\ub41c \uc0c8\ub85c\uc6b4 \ub2e8\uc5b4\ub85c \ub300\uccb4\ub418\ub294 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\n    \ucc38\uace0: \ubb38\uc7a5\uc5d0\uc11c \ub2e8\uc5b4\uc640 \uacf5\ubc31\uc758 \uc21c\uc11c\ub97c \uc720\uc9c0\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    anti_shuffle('\uc548\ub155')\uc740 '\uc548\ub155'\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    anti_shuffle('hello')\ub294 'ehllo'\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    anti_shuffle('Hello World!!!')\uc740 'Hello !!!Wdlor'\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "anti_shuffle", "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/87", "prompt": "def get_row(lst, x):\n    \"\"\"\n    2\ucc28\uc6d0 \ub370\uc774\ud130\uac00 \uc911\ucca9\ub41c \ubaa9\ub85d\uc73c\ub85c \uc8fc\uc5b4\uc9c0\ub294\ub370,\n    \ud589\ub82c\uacfc \ube44\uc2b7\ud558\uc9c0\ub9cc \ud589\ub82c\uacfc \ub2ec\ub9ac \uac01 \ud589\uc5d0 \ub2e4\ub978 \uc218\uc758 \uc5f4\uc774 \ud3ec\ud568\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    lst\uc640 \uc815\uc218 x\uac00 \uc8fc\uc5b4\uc9c0\uba74 \ubaa9\ub85d\uc5d0\uc11c \uc815\uc218 x\ub97c \uad6c\ud558\uace0,\n    \uac01 \ud29c\ud50c\uc774 0\uc73c\ub85c \uc2dc\uc791\ud558\ub294 \uc88c\ud45c (\ud589, \uc5f4)\uac00 \ub418\ub3c4\ub85d [(x1, y1), (x2, y2) ...]\uc758 \ud29c\ud50c \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc88c\ud45c\ub97c \uba3c\uc800 \ud589\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud569\ub2c8\ub2e4.\n    \ub610\ud55c \ud589\uc758 \uc88c\ud45c\ub97c \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uc5f4\uc744 \uae30\uc900\uc73c\ub85c \uc815\ub82c\ud569\ub2c8\ub2e4.\n    \n    \uc608\uc81c\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"", "entry_point": "get_row", "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/88", "prompt": "def sort_array(array):\n    \"\"\"\n    \uc74c\uc218\uac00 \uc544\ub2cc \uc815\uc218\uc758 \ubc30\uc5f4\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uc815\ub82c \ud6c4 \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc758 \ubcf5\uc0ac\ubcf8\uc744 \ubc18\ud658\ud558\uace0,\n    \ud569(\uccab \ubc88\uc9f8 \uc778\ub371\uc2a4 \uac12, \ub9c8\uc9c0\ub9c9 \uc778\ub371\uc2a4 \uac12)\uc774 \ud640\uc218\uc774\uba74 \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud558\uace0,\n    \ud569(\uccab \ubc88\uc9f8 \uc778\ub371\uc2a4 \uac12, \ub9c8\uc9c0\ub9c9 \uc778\ub371\uc2a4 \uac12)\uc774 \uc9dd\uc218\uc774\uba74 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud569\ub2c8\ub2e4.\n    \ucc38\uace0:\n    * \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc744 \ubcc0\uacbd\ud558\uc9c0 \ub9c8\uc138\uc694.\n\n    \uc608\uc2dc\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "entry_point": "sort_array", "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"}
{"task_id": "KR_HumanEval/89", "prompt": "def encrypt(s):\n    \"\"\"\ubb38\uc790\uc5f4\uc744 \uc778\uc218\ub85c \ubc1b\uace0 \ud68c\uc804 \uc911\uc778 \uc54c\ud30c\ubcb3\uc73c\ub85c \uc554\ud638\ud654\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218 encrypt\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \uc54c\ud30c\ubcb3\uc740 \ubb38\uc790\uac00 2\ub97c \uacf1\ud558\uc5ec \ub450 \uc790\ub9ac \uc544\ub798\ub85c \uc774\ub3d9\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud68c\uc804\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    encrypt('hi')\ub294 'lm'\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    encrypt('asdfghjkl')\ub294 'ewhjklnop'\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    encrypt('gf')\ub294 'kj'\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    encrypt('et')\ub294 'ix'\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "encrypt", "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/90", "prompt": "def next_smallest(lst):\n    \"\"\"\n    \uc815\uc218\uc758 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \ubaa9\ub85d\uc5d0\uc11c \ub450 \ubc88\uc9f8\ub85c \uc791\uc740 \uc694\uc18c\ub97c \ubc18\ud658\ud558\ub294 next_smallest() \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uadf8\ub7ec\ud55c \uc694\uc18c\uac00 \uc5c6\uc73c\uba74 None\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"", "entry_point": "next_smallest", "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/91", "prompt": "def is_bored(S):\n    \"\"\"\n    \ud55c \uc904\uc758 \ub2e8\uc5b4\uac00 \uc8fc\uc5b4\uc9c0\uace0 \uc9c0\ub8e8\ud568\uc758 \uac1c\uc218\ub97c \uc138\ub294 \uac83\uc774 \uacfc\uc81c\uc785\ub2c8\ub2e4.\n    \uc9c0\ub8e8\ud568\uc774\ub780 \u201cI\u201d\ub77c\ub294 \ub2e8\uc5b4\ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc7a5\uc744 \ub9d0\ud569\ub2c8\ub2e4.\n    \ubb38\uc7a5\uc740 '.', '?' \ub610\ub294 '!'\ub85c \uad6c\ubd84\ub429\ub2c8\ub2e4.\n   \n    \uc608\ub97c \ub4e4\uc5b4\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\ud558\ub298\uc740 \ud30c\ub797\uace0, \ud0dc\uc591\uc740 \ube5b\ub098\uace0, \ub098\ub294 \uc774 \ub0a0\uc528\uac00 \uc88b\uc544\uc694\")\n    1\n    \"\"\"", "entry_point": "is_bored", "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/92", "prompt": "def any_int(x, y, z):\n    \"\"\"\n    3\uac1c\uc758 \uc22b\uc790\ub97c \ubc1b\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \uc22b\uc790 \uc911 \ud558\ub098\uac00 \ub2e4\ub978 \ub450 \uc22b\uc790\uc758 \ud569\uacfc \uac19\uace0 \ubaa8\ub4e0 \uc22b\uc790\uac00 \uc815\uc218\uc778 \uacbd\uc6b0 \ucc38\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uadf8 \uc678\uc758 \uacbd\uc6b0\uc5d0\ub294 \uac70\uc9d3\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \n    \uc608\uc81c\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    \"\"\"", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/93", "prompt": "def encode(message):\n    \"\"\"\n    \uba54\uc2dc\uc9c0\ub97c \ubc1b\uc544 \ubaa8\ub4e0 \ubb38\uc790\uc758 \ub300\uc18c\ubb38\uc790\ub97c \ubc14\uafb8\uace0,\n    \uba54\uc2dc\uc9c0\uc758 \ubaa8\ub4e0 \ubaa8\uc74c\uc744 \uc601\uc5b4 \uc54c\ud30c\ubcb3\uc5d0\uc11c \ud574\ub2f9 \ubaa8\uc74c\ubcf4\ub2e4 2\uc790\ub9ac \uc55e\uc5d0 \ub098\ud0c0\ub098\ub294 \ubb38\uc790\ub85c \ub300\uccb4\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c\n    \uc778\ucf54\ub529\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694. \n    \ubb38\uc790\ub9cc \uac00\uc815\ud569\ub2c8\ub2e4. \n    \n    \uc608\uc2dc\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"", "entry_point": "encode", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/94", "prompt": "def skjkasdkd(lst):\n    \"\"\"\uc815\uc218 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uac00\uc7a5 \ud070 \uc18c\uc218\ub97c \uad6c\ud558\uace0 \uadf8 \uc790\ub9bf\uc218\uc758 \ud569\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n    \uc608\uc2dc\n    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 10\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 25\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 13\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 11\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [0,81,12,3,1,21]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 3\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [0,8,1,2,1,7]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 7\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "skjkasdkd", "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"}
{"task_id": "KR_HumanEval/95", "prompt": "def check_dict_case(dict):\n    \"\"\"\n    \uc0ac\uc804\uc774 \uc8fc\uc5b4\uc9c0\uba74 \ubaa8\ub4e0 \ud0a4\uac00 \uc18c\ubb38\uc790 \ubb38\uc790\uc5f4\uc774\uac70\ub098 \ubaa8\ub4e0 \ud0a4\uac00 \ub300\ubb38\uc790 \ubb38\uc790\uc5f4\uc774\uba74 True\ub97c \ubc18\ud658\ud558\uace0,\n    \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \uc0ac\uc804\uc774 \ube44\uc5b4 \uc788\uc73c\uba74 \uc774 \ud568\uc218\ub294 False\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\ub294 True\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\ub294 False\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\ub294 False\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    check_dict_case({\"Name\":\"John\",\"Age\":\"36\",\"City\":\"Houston\"})\ub294 False\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\ub294 True\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "check_dict_case", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"}
{"task_id": "KR_HumanEval/96", "prompt": "def count_up_to(n):\n    \"\"\"\uc74c\uc218\uac00 \uc544\ub2cc \uc815\uc218\ub97c \ubc1b\uc544 \uc18c\uc218\uc774\uace0 n\ubcf4\ub2e4 \uc791\uc740 \ucc98\uc74c n\uac1c\uc758 \uc815\uc218\uc758 \ubc30\uc5f4\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "entry_point": "count_up_to", "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"}
{"task_id": "KR_HumanEval/97", "prompt": "def multiply(a, b):\n    \"\"\"\ub450 \uc815\uc218\ub97c \ubc1b\uc544 \ub2e8\uc704 \uc790\ub9bf\uc218\uc758 \uacf1\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc644\uc131\ud569\ub2c8\ub2e4.\n    \uc785\ub825\uc774 \ud56d\uc0c1 \uc720\ud6a8\ud558\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\n    \uc608\uc2dc:\n    multiply(148, 412)\ub294 16\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    multiply(19, 28)\uc740 72\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    multiply(2020, 1851)\uc740 0\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    multiply(14,-15)\ub294 20\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "multiply", "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"}
{"task_id": "KR_HumanEval/98", "prompt": "def count_upper(s):\n    \"\"\"\n    \ubb38\uc790\uc5f4 s\uac00 \uc8fc\uc5b4\uc9c0\uba74 \uc9dd\uc218 \uc778\ub371\uc2a4\uc5d0 \uc788\ub294 \ub300\ubb38\uc790 \ubaa8\uc74c\uc758 \uac1c\uc218\ub97c \uc138\uc5b4\ubd05\ub2c8\ub2e4.\n    \n    \uc608\ub97c \ub4e4\uc5b4\n    count_upper('aBCdEf')\ub294 1\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    count_upper('abcdefg')\ub294 0\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    count_upper('dBBE')\ub294 0\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "count_upper", "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/99", "prompt": "def closest_integer(value):\n    \"\"\"\n    \uc22b\uc790\ub97c \ub098\ud0c0\ub0b4\ub294 \uac12(\ubb38\uc790\uc5f4)\uc744 \ubc1b\uc544 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc815\uc218\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \uc22b\uc790\uac00 \ub450 \uc815\uc218\uc5d0\uc11c \ub3d9\uc77c\ud55c \uac70\ub9ac\uc5d0 \uc788\ub2e4\uba74, 0\uc5d0\uc11c \uba40\uc5b4\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \ubc18\uc62c\ub9bc\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    \ucc38\uace0:\n    0\uc5d0\uc11c \uba40\uc5b4\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \ubc18\uc62c\ub9bc\ud55c\ub2e4\ub294 \uac83\uc740 \uc8fc\uc5b4\uc9c4 \uc22b\uc790\uac00 \ub450 \uc815\uc218\uc5d0\uc11c \uac70\ub9ac\uac00 \uac19\uc744 \uacbd\uc6b0\n    0\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uc815\uc218\ub97c \uc22b\uc790\ub97c \ubc18\ud658\ud574\uc57c \ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4 closest_integer(\u201c14.5\u201d)\ub294 15\ub97c \ubc18\ud658\ud574\uc57c \ud558\uace0 closest_integer(\u201c-14.5\u201d)\ub294 -15\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "closest_integer", "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"}
{"task_id": "KR_HumanEval/100", "prompt": "def make_a_pile(n):\n    \"\"\"\n    \uc591\uc758 \uc815\uc218 n\uc774 \uc8fc\uc5b4\uc9c0\uba74, n \ub808\ubca8\uc758 \ub3cc \ub354\ubbf8\ub97c \ub9cc\ub4e4\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \uccab \ubc88\uc9f8 \ub808\ubca8\uc5d0\ub294 n\uac1c\uc758 \ub3cc\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n    \ub2e4\uc74c \ub808\ubca8\uc758 \ub3cc \uac1c\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:\n        - n\uc774 \ud640\uc218\uc774\uba74 \ub2e4\uc74c \ud640\uc218.\n        - n\uc774 \uc9dd\uc218\uc774\uba74 \ub2e4\uc74c \uc9dd\uc218\uc785\ub2c8\ub2e4.\n    \uac01 \ub808\ubca8\uc5d0 \uc788\ub294 \uc2a4\ud1a4\uc758 \uc218\ub97c \ubaa9\ub85d\uc73c\ub85c \ubc18\ud658\ud558\uba70, \uc5ec\uae30\uc11c \uc778\ub371\uc2a4\uc758 \uc694\uc18c\n    i\ub294 \ud574\ub2f9 \ub808\ubca8\uc758 \uc2a4\ud1a4 \uac1c\uc218(i+1)\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n\n    \uc608\uc2dc\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"", "entry_point": "make_a_pile", "canonical_solution": "    return [n + 2*i for i in range(n)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/101", "prompt": "def words_string(s):\n    \"\"\"\n    \uc27c\ud45c\ub098 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ub2e8\uc5b4 \ubb38\uc790\uc5f4\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294\n    \ubb38\uc790\uc5f4\uc744 \ub2e8\uc5b4\ub85c \ubd84\ud560\ud558\uace0 \ub2e8\uc5b4\uc758 \ubc30\uc5f4\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \n    \uc608\ub97c \ub4e4\uc5b4\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"", "entry_point": "words_string", "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"}
{"task_id": "KR_HumanEval/102", "prompt": "def choose_num(x, y):\n    \"\"\"\uc774 \ud568\uc218\ub294 \ub450 \uac1c\uc758 \uc591\uc218 x\uc640 y\ub97c \ubc1b\uc544 [x, y] \ubc94\uc704\ub97c \ud3ec\ud568\ud558\ub294 \uac00\uc7a5 \ud070 \uc9dd\uc218 \uc815\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ub9cc\uc57d\uc5d0 \ud574\ub2f9\ud558\ub294 \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ud568\uc218\ub294 -1\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"", "entry_point": "choose_num", "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"}
{"task_id": "KR_HumanEval/103", "prompt": "def rounded_avg(n, m):\n    \"\"\"\ub450 \uac1c\uc758 \uc591\uc758 \uc815\uc218 n\uacfc m\uc774 \uc8fc\uc5b4\uc9c0\uba70, n\ubd80\ud130 m\uae4c\uc9c0(n\uacfc m \ud3ec\ud568)\uc758 \uc815\uc218\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\ub294 \ubb38\uc81c\uc785\ub2c8\ub2e4.\n    \ub2f5\uc744 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc815\uc218\ub85c \ubc18\uc62c\ub9bc\ud558\uace0 \uc774\ub97c 2\uc9c4\uc218\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.\n    n\uc774 m\ubcf4\ub2e4 \ud06c\uba74 -1\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc608\uc81c:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    ROUNDED_AVG(10, 20) => \"0b1111\"\n    ROUNDED_AVG(20, 33) => \"0b11010\"\n    \"\"\"", "entry_point": "rounded_avg", "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"}
{"task_id": "KR_HumanEval/104", "prompt": "def unique_digits(x):\n    \"\"\"\uc591\uc758 \uc815\uc218 x\uc758 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c \uc9dd\uc218 \uc790\ub9bf\uc218\uac00 \uc5c6\ub294 \ubaa8\ub4e0 \uc694\uc18c\uc758 \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \ucc38\uace0: \ubc18\ud658\ub41c \ubaa9\ub85d\uc740 \uc99d\uac00\ud558\ub294 \uc21c\uc11c\ub85c \uc815\ub82c\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \n    \uc608\ub97c \ub4e4\uc5b4\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"", "entry_point": "unique_digits", "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/105", "prompt": "def by_length(arr):\n    \"\"\"\n    \uc815\uc218\uc758 \ubc30\uc5f4\uc774 \uc8fc\uc5b4\uc9c0\uba74 1\uc5d0\uc11c 9 \uc0ac\uc774\uc758 \uc815\uc218\ub4e4\uc744 \uc815\ub82c\ud558\uace0, \uacb0\uacfc \ubc30\uc5f4\uc744 \ub4a4\uc9d1\uc740 \ub2e4\uc74c,\n    \uac01 \uc22b\uc790\ub97c \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\uc758 \ud574\ub2f9 \uc774\ub984\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> \uc815\ub82c \ubc30\uc5f4 -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> \uc5ed \ubc30\uc5f4 -> [8, 5, 4, 3, 2, 2, 1, 1]\n      [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] \ubc18\ud658\n    \n      \ubc30\uc5f4\uc774 \ube44\uc5b4 \uc788\uc73c\uba74 \ube48 \ubc30\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4:\n      arr = []\n      [] \ubc18\ud658\n    \n      \ubc30\uc5f4\uc5d0 \uc774\uc0c1\ud55c \uc22b\uc790\uac00 \uc788\uc73c\uba74 \ubb34\uc2dc\ud569\ub2c8\ub2e4:\n      arr = [1, -1 , 55]\n            -> \uc815\ub82c \ubc30\uc5f4 -> [-1, 1, 55]\n            -> \uc5ed \ubc30\uc5f4 -> [55, 1, -1]\n      ['One'] \ubc18\ud658\n    \"\"\"", "entry_point": "by_length", "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"}
{"task_id": "KR_HumanEval/106", "prompt": "def f(n):\n    \"\"\" n\uc744 \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544\uc11c \uc778\ub371\uc2a4 i\uc5d0 \uc788\ub294 \uc694\uc18c\uc758 \uac12\uc740 i\uac00 \uc9dd\uc218\uc77c \uacbd\uc6b0 i\uc758 \ud329\ud1a0\ub9ac\uc5bc\uc774\uace0,\n    \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 1\ubd80\ud130 i\uae4c\uc9c0\uc758 \ud569\uc774\ub418\ub294 \ud06c\uae30 n\uc758 \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218 f\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4.\n    i\ub294 1\ubd80\ud130 \uc2dc\uc791\ud569\ub2c8\ub2e4.\n    i\uc758 \uacc4\uc2b9\uc740 1\uc5d0\uc11c i\uae4c\uc9c0\uc758 \uc22b\uc790\ub97c \uacf1\ud55c \uac12(1 * 2 * ... * i)\uc785\ub2c8\ub2e4.\n    \uc608\uc2dc:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"", "entry_point": "f", "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"}
{"task_id": "KR_HumanEval/107", "prompt": "def even_odd_palindrome(n):\n    \"\"\"\n    \uc591\uc758 \uc815\uc218 n\uc774 \uc8fc\uc5b4\uc9c0\uba74, \ubc94\uc704(1, n)\uc5d0 \uc18d\ud558\ub294 \uc9dd\uc218 \ubc0f \ud640\uc218 \uc815\uc218 \ud314\ub9b0\ub4dc\ub86c\uc758 \uac1c\uc218\ub97c \ubaa8\ub450 \ud3ec\ud568\ud55c \ud29c\ud50c\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c 1:\n\n        Input: 3\n        \ucd9c\ub825 (1, 2)\n        \uc124\uba85: \uc124\uba85:\n        \uc815\uc218 \ud314\ub9b0\ub4dc\ub86c\uc740 1, 2, 3\uc785\ub2c8\ub2e4. \uadf8 \uc911 \ud558\ub098\ub294 \uc9dd\uc218\uc774\uace0 \ub450 \uac1c\ub294 \ud640\uc218\uc785\ub2c8\ub2e4.\n\n    \uc608\uc81c 2:\n\n        \uc785\ub825: 12\n        \ucd9c\ub825 (4, 6)\n        \uc124\uba85: \uc124\uba85:\n        \uc815\uc218 \ud314\ub9b0\ub4dc\ub86c\uc740 1, 2, 3, 4, 5, 6, 7, 8, 9, 11\uc785\ub2c8\ub2e4. \uadf8 \uc911 4\uac1c\ub294 \uc9dd\uc218\uc774\uace0 6\uac1c\ub294 \ud640\uc218\uc785\ub2c8\ub2e4.\n\n    \ucc38\uace0:\n        1. 1 <= n <= 10^3\n        2. \ubc18\ud658\ub41c \ud29c\ud50c\uc740 \uac01\uac01 \uc9dd\uc218 \ubc0f \ud640\uc218 \uc815\uc218 \ud314\ub9b0\ub4dc\ub86c\uc758 \uac1c\uc218\ub97c \uac00\uc9d1\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "even_odd_palindrome", "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/108", "prompt": "def count_nums(arr):\n    \"\"\"\n    \uc815\uc218 \ubc30\uc5f4\uc744 \ubc1b\uc544 \uc790\ub9bf\uc218\uc758 \ud569\uc774 0\ubcf4\ub2e4 \ud070 \uc694\uc18c\uc758 \uc218\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218 count_nums\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uc22b\uc790\uac00 \uc74c\uc218\uc778 \uacbd\uc6b0 \uccab \ubc88\uc9f8 \ubd80\ud638\uac00 \uc788\ub294 \uc790\ub9bf\uc218\uac00 \uc74c\uc218\uac00 \ub429\ub2c8\ub2e4:\n    \uc608\ub97c \ub4e4\uc5b4 -123\uc740 \ubd80\ud638\uac00 -1, 2, 3\uc778 \uc22b\uc790\uc785\ub2c8\ub2e4.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"", "entry_point": "count_nums", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/109", "prompt": "def move_one_ball(arr):\n    \"\"\"N\uac1c\uc758 \uc815\uc218\ub85c \uad6c\uc131\ub41c \ubc30\uc5f4 'arr'\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n    \ubc30\uc5f4[1], \ubc30\uc5f4[2], ..., \ubc30\uc5f4[N]. \ubc30\uc5f4\uc758 \uc22b\uc790\ub4e4\uc740 \ubb34\uc791\uc704\ub85c \uc815\ub82c\ub429\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc5d0 \ub300\ud574 \ub2e4\uc74c \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uc5ec \ubc30\uc5f4\uc744 \uac10\uc18c\ud558\uc9c0 \uc54a\ub294 \uc21c\uc11c\ub85c \uc815\ub82c\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc774 \uacfc\uc81c\uc785\ub2c8\ub2e4:\n    \uc624\ub978\ucabd \uc2dc\ud504\ud2b8 \uc5f0\uc0b0\uc744 \ud69f\uc218\uc5d0 \uc81c\ud55c \uc5c6\uc774 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    \n    \ud55c \ubc88\uc758 \uc624\ub978\ucabd \uc774\ub3d9 \uc5f0\uc0b0\uc740 \ubc30\uc5f4\uc758 \ubaa8\ub4e0 \uc694\uc18c\ub97c \uc62c\ubc14\ub978 \ubc29\ud5a5\uc73c\ub85c \ud55c \uc704\uce58\uc529 \uc774\ub3d9\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.\n    \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub294 \ubc30\uc5f4\uc758 \uc2dc\uc791 \uc704\uce58, \uc989 0\ubc88\uc9f8 \uc778\ub371\uc2a4\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4.\n    \n    \uc704\uc758 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uc5ec \uc815\ub82c\ub41c \ubc30\uc5f4\uc744 \uc5bb\uc744 \uc218 \uc788\uc73c\uba74 True\ub97c \ubc18\ud658\ud558\uace0 \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc774 \ube44\uc5b4 \uc788\uc73c\uba74 True\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \ucc38\uace0: \uc8fc\uc5b4\uc9c4 \ubaa9\ub85d\uc740 \uace0\uc720\ud55c \uc694\uc18c\ub97c \uac16\ub3c4\ub85d \ubcf4\uc7a5\ub429\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    \uc124\uba85: \uc624\ub978\ucabd \uc2dc\ud504\ud2b8 \uc5f0\uc0b0\uc744 \ub450 \ubc88 \uc218\ud589\ud558\uba74 \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc5d0 \ub300\ud574 \ube44\uac10\uc18c \uc21c\uc11c\ub97c\n                \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    \uc124\uba85: \uc624\ub978\ucabd \uc2dc\ud504\ud2b8 \uc5f0\uc0b0\uc744 \uc5ec\ub7ec \ubc88 \uc218\ud589\ud558\uc5ec\n                \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc5d0 \ub300\ud574 \uac10\uc18c\ud558\uc9c0 \uc54a\ub294 \uc21c\uc11c\ub97c \uc5bb\uc744 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n                \n    \"\"\"", "entry_point": "move_one_ball", "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"}
{"task_id": "KR_HumanEval/110", "prompt": "def exchange(lst1, lst2):\n    \"\"\"\uc774 \ubb38\uc81c\uc5d0\uc11c\ub294 \ub450 \uac1c\uc758 \uc22b\uc790 \ubaa9\ub85d\uc744 \ucde8\ud558\uace0,\n    \uadf8 \uc0ac\uc774\uc5d0\uc11c \uc694\uc18c \uad50\ud658\uc744 \uc218\ud589\ud558\uc5ec lst1\uc744 \uc9dd\uc218\ub9cc \uc788\ub294 \ubaa9\ub85d\uc73c\ub85c \ub9cc\ub4dc\ub294 \uac83\uc774 \uac00\ub2a5\ud55c\uc9c0 \uc5ec\ubd80\ub97c \uacb0\uc815\ud558\ub294 \ud568\uc218\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4.\n    lst1\uacfc lst2 \uc0ac\uc774\uc5d0\uc11c \uad50\ud658\ub418\ub294 \uc694\uc18c\uc758 \uc218\uc5d0\ub294 \uc81c\ud55c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\n    lst1\uacfc lst2 \uac04\uc5d0 \uc694\uc18c\ub97c \uad50\ud658\ud558\uc5ec lst1\uc758 \ubaa8\ub4e0 \uc694\uc18c\ub97c \uc9dd\uc218\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba74 \u201cYES\u201d\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \u201cNO\u201d\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    \uc785\ub825 \ubaa9\ub85d\uc774 \ube44\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "exchange", "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"}
{"task_id": "KR_HumanEval/111", "prompt": "def histogram(test):\n    \"\"\"\uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \uc18c\ubb38\uc790\ub97c \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uc774 \uc8fc\uc5b4\uc9c0\uba74, \ubc18\ubcf5 \ud69f\uc218\uac00 \uac00\uc7a5 \ub9ce\uace0 \ud574\ub2f9 \uac1c\uc218\uac00 \ud3ec\ud568\ub41c \ubb38\uc790\uc758 \uc0ac\uc804\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc5ec\ub7ec \ubb38\uc790\uac00 \uac19\uc740 \ud69f\uc218\ub85c \ubc18\ubcf5\ub418\uba74 \ubaa8\ub450 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \n    \uc608\uc2dc\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"", "entry_point": "histogram", "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/112", "prompt": "def reverse_delete(s,c):\n    \"\"\"\uc791\uc5c5\n    \ub450 \ubb38\uc790\uc5f4 s\uc640 c\uac00 \uc8fc\uc5b4\uc9c0\uba74, s\uc758 \ubaa8\ub4e0 \ubb38\uc790 \uc911 c\uc758 \ubb38\uc790\uc640 \uac19\uc740 \ubb38\uc790\ub97c \uc0ad\uc81c\ud55c \ub2e4\uc74c \uacb0\uacfc \ubb38\uc790\uc5f4\uc774 \ud314\ub9b0\ub4dc\ub86c\uc778\uc9c0 \ud655\uc778\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ubb38\uc790\uc5f4\uc774 \uc55e\ub4a4\ub85c \uac19\uc740 \ubb38\uc790\ub97c \uc77d\uc73c\uba74 \ud314\ub9b0\ub4dc\ub86c\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.\n    \uacb0\uacfc \ubb38\uc790\uc5f4\uacfc \uac80\uc0ac\uc5d0 \ub300\ud55c True/False\uac00 \ud3ec\ud568\ub41c \ud29c\ud50c\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n    s = \"abcde\", c = \"ae\"\uc758 \uacbd\uc6b0 \uacb0\uacfc\ub294 ('bcd',False)\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    s = \"abcdef\", c = \"b\"\uc758 \uacbd\uc6b0 \uacb0\uacfc\ub294 ('acdef',False)\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    s = \"abcdedcba\", c = \"ab\"\uc758 \uacbd\uc6b0 \uacb0\uacfc\ub294 ('cdedc',True)\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "reverse_delete", "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"}
{"task_id": "KR_HumanEval/113", "prompt": "def odd_count(lst):\n    \"\"\"\uac01 \ubb38\uc790\uc5f4\uc774 \uc22b\uc790\ub85c\ub9cc \uad6c\uc131\ub41c \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9c0\uba74 \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ucd9c\ub825\uc758 \uac01 \uc694\uc18c i\ub294 \u201c\uc785\ub825\uc758 \ubb38\uc790\uc5f4 i\uc5d0 \uc788\ub294 \ud640\uc218 \uc694\uc18c\uc758 \uc218\u201d\uc5ec\uc57c \ud569\ub2c8\ub2e4.\n    \uc5ec\uae30\uc11c \ubaa8\ub4e0 i\ub294 \uc785\ub825\uc758 i\ubc88\uc9f8 \ubb38\uc790\uc5f4\uc5d0 \uc788\ub294 \ud640\uc218 \uc790\ub9ac \uc218\ub85c \ub300\uccb4\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"", "entry_point": "odd_count", "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/114", "prompt": "def minSubArraySum(nums):\n    \"\"\"\n    \uc815\uc218\uc758 \ubc30\uc5f4 nums\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \ube44\uc5b4 \uc788\uc9c0 \uc54a\uc740 \ud558\uc704 \ubc30\uc5f4\uc758 \ucd5c\uc18c \ud569\uc744 \uad6c\ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", "entry_point": "minSubArraySum", "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"}
{"task_id": "KR_HumanEval/115", "prompt": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    \uc9c1\uc0ac\uac01\ud615 \uaca9\uc790\uc758 \uc6b0\ubb3c\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uac01 \uc904\uc740 \ud558\ub098\uc758 \uc6b0\ubb3c\uc744 \ub098\ud0c0\ub0b4\uba70, \ud55c \uc904\uc758 \uac01 1\uc740 \ud558\ub098\uc758 \ubb3c \ub2e8\uc704\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n    \uac01 \uc6b0\ubb3c\uc5d0\ub294 \ubb3c\uc744 \ucd94\ucd9c\ud558\ub294 \ub370 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud574\ub2f9 \ubc84\ud0b7\uc774 \uc788\uc73c\uba70, \ubaa8\ub4e0 \ubc84\ud0b7\uc758 \uc6a9\ub7c9\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n    \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294 \ubc84\ud0b7\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc6b0\ubb3c\uc744 \ube44\uc6b0\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \ubc84\ud0b7\uc744 \ub0b4\ub824\uc57c \ud558\ub294 \ud69f\uc218\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c 1:\n        \uc785\ub825:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        \ucd9c\ub825: 6\n\n    \uc608\uc81c 2:\n        \uc785\ub825:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        \ucd9c\ub825: 5\n    \n    \uc608\uc81c 3:\n        \uc785\ub825:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        \ucd9c\ub825: 0\n\n    \uc81c\uc57d \uc870\uac74:\n        * \ubaa8\ub4e0 \uc6f0\uc758 \uae38\uc774\uac00 \uac19\uc74c\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"", "entry_point": "max_fill", "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"}
{"task_id": "KR_HumanEval/116", "prompt": "def sort_array(arr):\n    \"\"\"\n    \uc774 \uce74\ud0c0\uc5d0\uc11c\ub294 \uc74c\uc218\uac00 \uc544\ub2cc \uc815\uc218\ub4e4\uc758 \ubc30\uc5f4\uc744 \uc815\uc218\ub4e4\uc758 \uc774\uc9c4 \ud45c\ud604\uc758 1\uc758 \uac1c\uc218\uc5d0 \ub530\ub77c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ube44\uc2b7\ud55c \uc218\uc758 1\uc758 \uacbd\uc6b0, \uc2ed\uc9c4\uc218 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc815\ub82c\ud569\ub2c8\ub2e4.\n\n    \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"", "entry_point": "sort_array", "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/117", "prompt": "def select_words(s, n):\n    \"\"\"\ubb38\uc790\uc5f4 s\uc640 \uc790\uc5f0\uc218 n\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \ubb38\uc790\uc5f4 s\uc5d0\uc11c \uc815\ud655\ud788 n\uac1c\uc758 \uc790\uc74c\uc744 \ud3ec\ud568\ud558\ub294 \ubaa8\ub4e0 \ub2e8\uc5b4\uc758 \ubaa9\ub85d\uc744 \ubb38\uc790\uc5f4 s\uc5d0 \ub098\ud0c0\ub098\ub294 \uc21c\uc11c\ub300\ub85c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uad6c\ud604\ud558\ub77c\ub294 \uacfc\uc81c\uac00 \uc8fc\uc5b4\uc84c\uc2b5\ub2c8\ub2e4.\n    \ubb38\uc790\uc5f4 s\uac00 \ube44\uc5b4 \uc788\uc73c\uba74 \ud568\uc218\ub294 \ube48 \ubaa9\ub85d\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ucc38\uace0: \uc785\ub825 \ubb38\uc790\uc5f4\uc5d0 \ubb38\uc790\uc640 \uacf5\ubc31\ub9cc \ud3ec\ud568\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc608\uc2dc\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"}
{"task_id": "KR_HumanEval/118", "prompt": "def get_closest_vowel(word):\n    \"\"\"\ub2e8\uc5b4\uac00 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\ub2e8\n    \uc5b4\uc758 \uc624\ub978\ucabd\uc5d0\uc11c \ub450 \uc790\uc74c \uc0ac\uc774\uc5d0 \uc788\ub294 \uac00\uc7a5 \uac00\uae4c\uc6b4 \ubaa8\uc74c\uc744 \ucc3e\ub294 \uac83\uc774 \uacfc\uc81c\uc785\ub2c8\ub2e4(\ub300\uc18c\ubb38\uc790 \uad6c\ubd84).\n    \n    \uc2dc\uc791 \ubaa8\uc74c\uacfc \ub05d \ubaa8\uc74c\uc740 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n    \uc704\uc758 \uc870\uac74\uc744 \ucda9\uc871\ud558\ub294 \ubaa8\uc74c\uc744 \ucc3e\uc9c0 \ubabb\ud558\uba74 \ube48 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \n    \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc5d0 \uc601\ubb38\uc790\ub9cc \ud3ec\ud568\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n    \uc608\uc81c\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"", "entry_point": "get_closest_vowel", "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/119", "prompt": "def match_parens(lst):\n    \"\"\"\n    \ub450 \ubb38\uc790\uc5f4\uc758 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9c0\uba70, \ub450 \ubb38\uc790\uc5f4 \ubaa8\ub450 \uc5f4\ub9b0 \uad04\ud638 '(' \ub610\ub294 \ub2eb\ud78c \uad04\ud638 ')'\ub85c\ub9cc \uad6c\uc131\ub429\ub2c8\ub2e4.\n    \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294 \ub450 \ubb38\uc790\uc5f4\uc744 \uc5b4\ub5a4 \uc21c\uc11c\ub85c \uc5f0\uacb0\ud560 \uc218 \uc788\ub294\uc9c0, \uadf8 \uacb0\uacfc \ubb38\uc790\uc5f4\uc774 \uc88b\uc740\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \ubb38\uc790\uc5f4 S\ub294 S\uc758 \ubaa8\ub4e0 \uad04\ud638\uac00 \uade0\ud615\uc744 \uc774\ub8e8\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc88b\uc740 \uac83\uc73c\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4 '(())()' \ubb38\uc790\uc5f4\uc740 \uc591\ud638\ud558\uc9c0\ub9cc '())' \ubb38\uc790\uc5f4\uc740 \uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n    \uc88b\uc740 \ubb38\uc790\uc5f4\uc744 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc774 \uc788\uc73c\uba74 'Yes'\ub97c \ubc18\ud658\ud558\uace0 \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 'No'\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"", "entry_point": "match_parens", "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"}
{"task_id": "KR_HumanEval/120", "prompt": "def maximum(arr, k):\n    \"\"\"\n    \uc815\uc218\uc758 \ubc30\uc5f4 arr\uacfc \uc591\uc758 \uc815\uc218 k\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, arr\uc5d0\uc11c \ucd5c\ub300 k\uac1c\uc758 \uc22b\uc790\ub97c \ubf51\uc544 \uae38\uc774\uac00 k\uc774\uace0 \uc815\ub82c\ub41c \ubc30\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c 1:\n\n        \uc785\ub825: arr = [-3, -4, 5], k = 3\n        \ucd9c\ub825: [-4, -3, 5]\n\n    \uc608\uc81c 2:\n\n        \uc785\ub825: arr = [4, -4, 4], k = 2\n        \ucd9c\ub825 [4, 4]\n\n    \uc608\uc81c 3:\n\n        \uc785\ub825: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        \ucd9c\ub825 [2]\n\n    \ucc38\uace0\n        1. \ubc30\uc5f4\uc758 \uae38\uc774\ub294 [1, 1000] \ubc94\uc704\uc785\ub2c8\ub2e4.\n        2. \ubc30\uc5f4\uc758 \uc694\uc18c\ub294 [-1000, 1000] \ubc94\uc704\uac00 \ub429\ub2c8\ub2e4.\n        3. 0 <= k <= len(arr)\n    \"\"\"", "entry_point": "maximum", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"}
{"task_id": "KR_HumanEval/121", "prompt": "def solution(lst):\n    \"\"\"\ube44\uc5b4 \uc788\uc9c0 \uc54a\uc740 \uc815\uc218 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uc9dd\uc218 \uc704\uce58\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ud640\uc218 \uc694\uc18c\uc758 \ud569\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \n\n    \uc608\uc81c\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"", "entry_point": "solution", "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"}
{"task_id": "KR_HumanEval/122", "prompt": "def add_elements(arr, k):\n    \"\"\"\n    \ube44\uc5b4 \uc788\uc9c0 \uc54a\uc740 \uc815\uc218 \ubc30\uc5f4 arr\uacfc \uc815\uc218 k\uac00 \uc8fc\uc5b4\uc9c0\uba74 \ubc30\uc5f4\uc758 \uccab \ubc88\uc9f8 k \uc694\uc18c\uc5d0\uc11c \ucd5c\ub300 \ub450 \uc790\ub9ac \uc22b\uc790\ub97c \uac00\uc9c4 \uc694\uc18c\uc758 \ud569\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c:\n\n        \uc785\ub825: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        \ucd9c\ub825: 24 # 21 + 3\uc758 \ud569\uacc4\n\n    \uc81c\uc57d \uc870\uac74\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "entry_point": "add_elements", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/123", "prompt": "def get_odd_collatz(n):\n    \"\"\"\n    \uc591\uc758 \uc815\uc218 n\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \ucf5c\ub77c\uce20 \uc218\uc5f4\uc758 \ud640\uc218\uc778 \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \ucf5c\ub77c\uce20 \uac00\uc124\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub41c \uc218\uc5f4\uc5d0 \uad00\ud55c \uc218\ud559\uc758 \uac00\uc124\ub85c, \uc591\uc758 \uc815\uc218 n\uc73c\ub85c \uc2dc\uc791\ud55c \ub2e4\uc74c \uac01 \ud56d\uc740 \uc774\uc804 \ud56d\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \uc5bb\uc5b4\uc9d1\ub2c8\ub2e4:\n    \uc774\uc804 \ud56d\uc774 \uc9dd\uc218\uc774\uba74 \ub2e4\uc74c \ud56d\uc740 \uc774\uc804 \ud56d\uc758 \uc808\ubc18\uc785\ub2c8\ub2e4.\n    \uc774\uc804 \ud56d\uc774 \ud640\uc218\uc778 \uacbd\uc6b0 \ub2e4\uc74c \ud56d\uc740 \uc774\uc804 \ud56d\uc758 3\ubc30\uc5d0 1\uc744 \ub354\ud55c \uac12\uc785\ub2c8\ub2e4.\n    n\uc758 \uac12\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc218\uc5f4\uc740 \ud56d\uc0c1 1\uc5d0 \ub3c4\ub2ec\ud560 \uac83\uc774\ub77c\uace0 \ucd94\uce21\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n    \ucc38\uace0:\n        1. Collatz(1)\uc740 [1]\uc785\ub2c8\ub2e4.\n        2. \ubc18\ud658\ub41c \ubaa9\ub85d\uc740 \uc99d\uac00\ud558\ub294 \uc21c\uc11c\ub85c \uc815\ub82c\ub429\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    get_odd_collatz(5) \ubc18\ud658 [1, 5] # 5\uc758 \ucf5c\ub77c\uce20 \uc2dc\ud000\uc2a4\ub294 [5, 16, 8, 4, 2, 1]\uc774\ubbc0\ub85c \ud640\uc218\ub294 1\uacfc 5\ubfd0\uc785\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "get_odd_collatz", "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/124", "prompt": "def valid_date(date):\n    \"\"\"\uc8fc\uc5b4\uc9c4 \ub0a0\uc9dc \ubb38\uc790\uc5f4\uc758 \uc720\ud6a8\uc131\uc744 \uac80\uc0ac\ud558\uc5ec \ub0a0\uc9dc\uac00 \uc720\ud6a8\ud558\uba74 True\ub97c \ubc18\ud658\ud558\uace0 \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ub0a0\uc9dc\ub294 \ub2e4\uc74c \uaddc\uce59\uc744 \ubaa8\ub450 \ucda9\uc871\ud558\ub294 \uacbd\uc6b0\uc5d0 \uc720\ud6a8\ud569\ub2c8\ub2e4:\n    1. \ub0a0\uc9dc \ubb38\uc790\uc5f4\uc774 \ube44\uc5b4 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n    2. 1,3,5,7,8,10,12 \uc6d4\uc758 \uc77c \uc218\uac00 1 \uc774\uc0c1 31\uc77c \uc774\ud558\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 4,6,9,11 \uc6d4\uc758 \uacbd\uc6b0 \uc77c\uc218\uac00 1 \uc774\uc0c1 30\uc77c \uc774\ud558\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 2\ubc88\uc9f8 \ub2ec\uc758 \uc77c\uc218\ub294 1\uc77c \uc774\uc0c1 29\uc77c \uc774\ud558\uc785\ub2c8\ub2e4.\n    3. \uc6d4\uc740 1\ubcf4\ub2e4 \uc791\uac70\ub098 12\ubcf4\ub2e4 \ucee4\uc11c\ub294 \uc548\ub429\ub2c8\ub2e4.\n    4. \ub0a0\uc9dc\ub294 mm-dd-yyyy \ud615\uc2dd\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"", "entry_point": "valid_date", "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"}
{"task_id": "KR_HumanEval/125", "prompt": "def split_words(txt):\n    \"\"\"\n    \ub2e8\uc5b4 \ubb38\uc790\uc5f4\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uacf5\ubc31\uc73c\ub85c \ubd84\ud560\ub41c \ub2e8\uc5b4 \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\uace0,\n    \ud14d\uc2a4\ud2b8\uc5d0 \uacf5\ubc31\uc774 \uc5c6\uc73c\uba74 \uc27c\ud45c ',', \uc27c\ud45c\uac00 \uc5c6\uc73c\uba74 \uc54c\ud30c\ubcb3\uc758 \ud640\uc218 \uc21c\uc11c\ub85c \uc18c\ubb38\uc790 \uc218\ub97c \ubc18\ud658\ud574\uc57c \ud558\uba70,\n    ord('a') = 0, ord('b') = 1, ... ord('z') = 25\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"", "entry_point": "split_words", "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"}
{"task_id": "KR_HumanEval/126", "prompt": "def is_sorted(lst):\n    \"\"\"\n    \uc22b\uc790 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ub418\uc5c8\ub294\uc9c0 \uc5ec\ubd80\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ubaa9\ub85d\uc5d0 \ub3d9\uc77c\ud55c \uc22b\uc790\uac00 1\uac1c \uc774\uc0c1 \uc911\ubcf5\ub418\uba74 False\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc74c\uc218\ub294 \uc5c6\uace0 \uc815\uc218\ub9cc \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/127", "prompt": "def intersection(interval1, interval2):\n    \"\"\"\ub450 \uac1c\uc758 \uac04\uaca9\uc774 \uc8fc\uc5b4\uc9c0\uba70, \uac01 \uac04\uaca9\uc740 \ud55c \uc30d\uc758 \uc815\uc218\uc785\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4 \uac04\uaca9 = (\uc2dc\uc791, \ub05d) = (1, 2)\uc785\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \uac04\uaca9\uc740 \ub2eb\ud600 \uc788\uc73c\ubbc0\ub85c \uac04\uaca9(\uc2dc\uc791, \ub05d)\uc5d0\ub294 \uc2dc\uc791\uacfc \ub05d\uc774 \ubaa8\ub450 \ud3ec\ud568\ub429\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \uac01 \uac04\uaca9\uc5d0 \ub300\ud574 \uc2dc\uc791\uc774 \ub05d\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\n    \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294 \uc774 \ub450 \uac04\uaca9\uc758 \uad50\uc9d1\ud569 \uae38\uc774\uac00 \uc18c\uc218\uc778\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4 (1, 3), (2, 4) \uac04\uaca9\uc758 \uad50\uc9d1\ud569\uc740 (2, 3)\uc73c\ub85c \uadf8 \uae38\uc774\uac00 1\uc774\ubbc0\ub85c \uc18c\uc218\uac00 \uc544\ub2d9\ub2c8\ub2e4.\n    \uad50\uc9d1\ud569\uc758 \uae38\uc774\uac00 \uc18c\uc218\uc774\uba74 \u201cYES\u201d\ub97c \ubc18\ud658\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \u201cNO\u201d\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ub450 \uac04\uaca9\uc774 \uad50\ucc28\ud558\uc9c0 \uc54a\uc73c\uba74 \u201cNO\u201d\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n\n    [\uc785\ub825/\ucd9c\ub825] \uc0d8\ud50c\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"", "entry_point": "intersection", "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"}
{"task_id": "KR_HumanEval/128", "prompt": "def prod_signs(arr):\n    \"\"\"\n    \uc815\uc218\uc758 \ubc30\uc5f4\uc774 \uc8fc\uc5b4\uc9c0\uba74 1, -1 \ub610\ub294 0\uc73c\ub85c \ud45c\uc2dc\ub418\ub294, \ubc30\uc5f4\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \uc218\uc758 \ubd80\ud638\ub4e4\uc758 \uacf1\uc73c\ub85c \uacf1\ud574\uc9c4 \uc815\uc218\ub4e4\uc758 \ud06c\uae30\uc758 \ud569\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ucc38\uace0: \ube48 \ubc30\uc5f4\uc758 \uacbd\uc6b0 None\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"", "entry_point": "prod_signs", "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/129", "prompt": "def minPath(grid, k):\n    \"\"\"\n    \ud589\uacfc \uc5f4\uc774 N\uac1c\uc778 \uaca9\uc790(N >= 2)\uc640 \uc591\uc758 \uc815\uc218 k\uac00 \uc8fc\uc5b4\uc9c0\uba74 \uaca9\uc790\uc758 \uac01 \uc140\uc5d0\ub294 \uac12\uc774 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n    [1, N * N]\uc744 \ud3ec\ud568\ud558\ub294 \ubc94\uc704\uc758 \ubaa8\ub4e0 \uc815\uc218\ub294 \uadf8\ub9ac\ub4dc\uc758 \uc140\uc5d0 \uc815\ud655\ud788 \ud55c \ubc88\ub9cc \ub098\ud0c0\ub0a9\ub2c8\ub2e4.\n\n    \uadf8\ub9ac\ub4dc\uc5d0\uc11c \uae38\uc774 k\uc758 \ucd5c\uc18c \uacbd\ub85c\ub97c \ucc3e\uc544\uc57c \ud569\ub2c8\ub2e4.\n    \uc5b4\ub290 \uc140\uc5d0\uc11c\ub4e0 \uc2dc\uc791\ud560 \uc218 \uc788\uc73c\uba70, \uac01 \ub2e8\uacc4\uc5d0\uc11c \uc774\uc6c3 \uc140\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc989, \ud604\uc7ac \uc140\uacfc \uac00\uc7a5\uc790\ub9ac\ub97c \uacf5\uc720\ud558\ub294 \uc140\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    \uae38\uc774\uac00 k\uc778 \uacbd\ub85c\ub294 \uc815\ud655\ud788 k\uac1c\uc758 \uc140\uc744 \ubc29\ubb38\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4(\ubc18\ub4dc\uc2dc \uad6c\ubd84\ub418\ub294 \uac83\uc740 \uc544\ub2d8).\n    \uadf8\ub9ac\ub4dc\ub97c \ubc97\uc5b4\ub0a0 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n    A\uc640 B\uac00 \ud1b5\uacfc\ud558\ub294 \uc140\uc758 \uac12 \ubaa9\ub85d\uc744 \uc21c\uc11c\ub300\ub85c \ub098\uc5f4\ud55c \ud6c4(\uc774\ub97c lst_A\uc640 lst_B\ub77c\uace0 \ubd80\ub974\uaca0\uc2b5\ub2c8\ub2e4) A \uacbd\ub85c(\uae38\uc774 k)\ub294 B \uacbd\ub85c(\uae38\uc774 k)\ubcf4\ub2e4 \uc9e7\uc740 \uac83\uc73c\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4, lst_A\ub294 \uc0ac\uc804\uc801\uc73c\ub85c lst_B\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4.\n    \uc989, \uc815\uc218 \uc778\ub371\uc2a4 i(1 <= i <= k)\uac00 \uc874\uc7ac\ud558\uc5ec lst_A[i] < lst_B[i]\uac00 \ub418\uace0 \uc784\uc758\uc758 j(1 <= j <= i)\uc5d0 \ub300\ud574 lst_A[j] = lst_B[j]\uac00 \ub418\ub294 \uacbd\uc6b0\uc785\ub2c8\ub2e4.\n    \ub2f5\uc740 \uace0\uc720\ud558\ub2e4\ub294 \uac83\uc774 \ubcf4\uc7a5\ub429\ub2c8\ub2e4.\n    \ucd5c\uc18c \uacbd\ub85c\uac00 \ud1b5\uacfc\ud558\ub294 \uc140\uc758 \uac12\uc758 \uc815\ub82c\ub41c \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c:\n\n        \uc785\ub825: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        \ucd9c\ub825 [1, 2, 1]\n\n        \uc785\ub825: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        \ucd9c\ub825 [1]\n    \"\"\"", "entry_point": "minPath", "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"}
{"task_id": "KR_HumanEval/130", "prompt": "def tri(n):\n    \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uc740 \ub204\uad6c\ub098 \uc54c\uace0 \uc788\uc73c\uba70 \uc9c0\ub09c \uba87 \uc138\uae30 \ub3d9\uc548 \uc218\ud559\uc790\ub4e4\uc774 \uc2ec\ub3c4 \uc788\uac8c \uc5f0\uad6c\ud55c \uc218\uc5f4\uc785\ub2c8\ub2e4.\n    \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc774 \ubaa8\ub974\ub294 \uac83\uc740 \ud2b8\ub9ac\ubcf4\ub098\uce58 \uc218\uc5f4\uc785\ub2c8\ub2e4.\n    \ud2b8\ub9ac\ubcf4\ub098\uce58 \uc218\uc5f4\uc740 \uc7ac\uadc0\uc5d0 \uc758\ud574 \uc815\uc758\ub429\ub2c8\ub2e4:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, n\uc774 \uc9dd\uc218\uc778 \uacbd\uc6b0.\n    n\uc774 \ud640\uc218\uc778 \uacbd\uc6b0 tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1).\n    \uc608\ub97c \ub4e4\uc5b4\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    \uc74c\uc218\uac00 \uc544\ub2cc \uc815\uc218 n\uc774 \uc8fc\uc5b4\uc9c0\uba74, \ud2b8\ub9ac\ubcf4\ub098\uce58 \uc218\uc5f4\uc758 \ud2b8\ub9ac\ubcf4\ub098\uce58 \uc218\uc5f4\uc758 \ucc98\uc74c n + 1 \uac1c\uc758 \uc22b\uc790\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc608\uc2dc\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"", "entry_point": "tri", "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"}
{"task_id": "KR_HumanEval/131", "prompt": "def digits(n):\n    \"\"\"\uc591\uc758 \uc815\uc218 n\uc774 \uc8fc\uc5b4\uc9c0\uba74 \ud640\uc218 \uc790\ub9bf\uc218\uc758 \uacf1\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \ubaa8\ub4e0 \uc790\ub9ac\uac00 \uc9dd\uc218\uc774\uba74 0\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    digits(1) == 1\n    digits(4) == 0\n    digits(235) == 15\n    \"\"\"", "entry_point": "digits", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"}
{"task_id": "KR_HumanEval/132", "prompt": "def is_nested(string):\n    \"\"\"\n    \ub300\uad04\ud638\ub9cc \ud3ec\ud568\ub41c \ubb38\uc790\uc5f4\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \uc774 \ud568\uc218\ub294 \ub300\uad04\ud638 \uc911 \ud558\ub098 \uc774\uc0c1\uc758 \ub300\uad04\ud638\uac00 \uc911\ucca9\ub418\uc5b4 \uc788\ub294 \uc720\ud6a8\ud55c \ub300\uad04\ud638 \uc2dc\ud000\uc2a4\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc True\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"", "entry_point": "is_nested", "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"}
{"task_id": "KR_HumanEval/133", "prompt": "def sum_squares(lst):\n    \"\"\"\uc22b\uc790 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \ubaa9\ub85d\uc5d0\uc11c \uc81c\uacf1\ub41c \uc22b\uc790\uc758 \ud569\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4,\n    \ubaa9\ub85d\uc758 \uac01 \uc694\uc18c\ub97c \uba3c\uc800 \uc0c1\uc704 int(Ceiling)\uc73c\ub85c \ubc18\uc62c\ub9bc\ud569\ub2c8\ub2e4.\n    \uc608\uc2dc:\n    lst = [1,2,3]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 14\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [1,4,9]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 98\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [1,3,5,7]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 84\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [1.4,4.2,0]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 29\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [-2.4,1,1]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 6\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \n\n    \"\"\"", "entry_point": "sum_squares", "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/134", "prompt": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \ubb38\uc790\uac00 \uc54c\ud30c\ubcb3 \ubb38\uc790\uc774\uace0 \ub2e8\uc5b4\uc758 \uc77c\ubd80\uac00 \uc544\ub2cc \uacbd\uc6b0 True\ub97c \ubc18\ud658\ud558\uace0,\n    \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \ucc38\uace0: '\ub2e8\uc5b4'\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ubb38\uc790 \uadf8\ub8f9\uc785\ub2c8\ub2e4.\n\n    \uc608\uc2dc\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/135", "prompt": "def can_arrange(arr):\n    \"\"\"\ubc14\ub85c \uc55e \uc694\uc18c\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc9c0 \uc54a\uc740 \uc694\uc18c\uc758 \uac00\uc7a5 \ud070 \uc778\ub371\uc2a4\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \uadf8\ub7ec\ud55c \uc694\uc18c\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 -1\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \ubc30\uc5f4\uc740 \uc911\ubcf5\ub41c \uac12\uc744 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n    \uc608\uc2dc\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"", "entry_point": "can_arrange", "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"}
{"task_id": "KR_HumanEval/136", "prompt": "def largest_smallest_integers(lst):\n    \"\"\"\n    \ubaa9\ub85d\uc5d0\uc11c 'a'\ub294 \uc74c\uc758 \uc815\uc218 \uc911 \uac00\uc7a5 \ud070 \uc815\uc218\uc774\uace0 'b'\ub294 \uc591\uc758 \uc815\uc218 \uc911 \uac00\uc7a5 \uc791\uc740 \uc815\uc218\uc778 \ud29c\ud50c(a, b)\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \uc74c\uc218\ub098 \uc591\uc218\uac00 \uc5c6\ub294 \uacbd\uc6b0 None\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\uc2dc\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"", "entry_point": "largest_smallest_integers", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"}
{"task_id": "KR_HumanEval/137", "prompt": "def compare_one(a, b):\n    \"\"\"\n    \uc2e4\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \uc815\uc218, \ubd80\ub3d9 \uc18c\uc218\uc810 \ub610\ub294 \ubb38\uc790\uc5f4\uc744 \ubc1b\uc544 \uc8fc\uc5b4\uc9c4 \ubcc0\uc218 \uc720\ud615\uc5d0\uc11c \ub354 \ud070 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \uac12\uc774 \uac19\uc73c\uba74 None\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4\n    \ucc38\uace0: \uc2e4\uc218\uac00 \ubb38\uc790\uc5f4\ub85c \ud45c\uc2dc\ub418\ub294 \uacbd\uc6b0 \ubd80\ub3d9 \uc18c\uc218\uc810\uc740 . \ub610\ub294 ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"", "entry_point": "compare_one", "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\n    \"\"\"\uc8fc\uc5b4\uc9c4 \uc22b\uc790 n\uc744 \uc815\ud655\ud788 4\uac1c\uc758 \uc591\uc758 \uc9dd\uc218 \ud569\uc73c\ub85c \uc4f8 \uc218 \uc788\ub294\uc9c0 \ud3c9\uac00\ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"", "entry_point": "is_equal_to_sum_even", "canonical_solution": "    return n%2 == 0 and n >= 8\n", "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"}
{"task_id": "KR_HumanEval/139", "prompt": "def special_factorial(n):\n    \"\"\"\ube0c\ub77c\uc9c8 \uacc4\uc2b9\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \uc5ec\uae30\uc11c n > 0\n\n    \uc608\ub97c \ub4e4\uc5b4\n    >>> special_factorial(4)\n    288\n\n    \uc774 \ud568\uc218\ub294 \uc815\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uace0 \uc774 \uc815\uc218\uc758 \ud2b9\uc218 \ub97c \ud329\ud1a0\ub9ac\uc5bc\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "special_factorial", "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"}
{"task_id": "KR_HumanEval/140", "prompt": "def fix_spaces(text):\n    \"\"\"\n    \ubb38\uc790\uc5f4 \ud14d\uc2a4\ud2b8\uac00 \uc8fc\uc5b4\uc9c0\uba74 \uadf8 \uc548\uc758 \ubaa8\ub4e0 \uacf5\ubc31\uc744 \ubc11\uc904\ub85c \ubc14\uafb8\uace0, \ubb38\uc790\uc5f4\uc5d0 \uacf5\ubc31\uc774 2\uac1c \uc774\uc0c1 \uc5f0\uc18d\ub41c \uacbd\uc6b0 \uc5f0\uc18d\ub41c \ubaa8\ub4e0 \uacf5\ubc31\uc744 -\ub85c \ubc14\uafc9\ub2c8\ub2e4. \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"", "entry_point": "fix_spaces", "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/141", "prompt": "def file_name_check(file_name):\n    \"\"\"\ud30c\uc77c \uc774\ub984\uc744 \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uc744 \ubc1b\uc544 \ud30c\uc77c \uc774\ub984\uc774 \uc720\ud6a8\ud558\uba74 '\uc608'\ub97c \ubc18\ud658\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 '\uc544\ub2c8\uc624'\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n    \ud30c\uc77c \uc774\ub984\uc740 \ub2e4\uc74c \uc870\uac74\uc744 \ubaa8\ub450 \ucda9\uc871\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc720\ud6a8\ud55c \uac83\uc73c\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4:\n    - \ud30c\uc77c \uc774\ub984\uc5d0 \uc138 \uc790\ub9ac('0'-'9')\uac00 \ub118\uc9c0 \uc54a\uc544\uc57c \ud569\ub2c8\ub2e4.\n    - \ud30c\uc77c \uc774\ub984\uc5d0 \uc815\ud655\ud788 \ud558\ub098\uc758 \uc810 '.'\uc774 \ud3ec\ud568\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    - \uc810 \uc55e\uc758 \ud558\uc704 \ubb38\uc790\uc5f4\uc740 \ube44\uc5b4 \uc788\uc73c\uba74 \uc548 \ub418\uba70 \ub77c\ud2f4 \uc54c\ud30c\ubcb3('a'-'z' \ubc0f 'A'-'Z')\uc758 \ubb38\uc790\ub85c \uc2dc\uc791\ud574\uc57c \ud569\ub2c8\ub2e4.\n    - \uc810 \ub4a4\uc758 \ud558\uc704 \ubb38\uc790\uc5f4\uc740 \ub2e4\uc74c \uc911 \ud558\ub098\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4: ['txt', 'exe', 'dll']\n    \uc608\uc2dc\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (\uc774\ub984\uc740 \ub77c\ud2f4 \uc54c\ud30c\ubcb3 \ubb38\uc790\ub85c \uc2dc\uc791\ud574\uc57c \ud568)\n    \"\"\"", "entry_point": "file_name_check", "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"}
{"task_id": "KR_HumanEval/142", "prompt": "def sum_squares(lst):\n    \"\"\"\"\n    \uc774 \ud568\uc218\ub294 \uc815\uc218 \ubaa9\ub85d\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \ubaa9\ub85d\uc758 \ubaa8\ub4e0 \ud56d\ubaa9\uc5d0 \ub300\ud574 \ud568\uc218\ub294 \uc778\ub371\uc2a4\uac00 3\uc758 \ubc30\uc218\uc778 \uacbd\uc6b0 \uc815\uc218 \ud56d\ubaa9\uc744 \uc81c\uacf1\ud558\uace0 \uc778\ub371\uc2a4\uac00 3\uc758 \ubc30\uc218\uac00 \uc544\ub2cc 4\uc758 \ubc30\uc218\uc778 \uacbd\uc6b0 \uc815\uc218 \ud56d\ubaa9\uc744 \ud050\ube0c\ud654\ud569\ub2c8\ub2e4.\n    \ubaa9\ub85d\uc5d0\uc11c \uc778\ub371\uc2a4\uac00 3 \ub610\ub294 4\uc758 \ubc30\uc218\uac00 \uc544\ub2cc \ud56d\ubaa9\uc740 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \ud568\uc218\ub294 \ubaa8\ub4e0 \ud56d\ubaa9\uc758 \ud569\uacc4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \n    \n    \uc608\uc2dc\n    lst = [1,2,3]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 6\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = []\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 0\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    lst = [-1,-5,2,-1,-5]\uc758 \uacbd\uc6b0 \ucd9c\ub825\uc740 -126\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "sum_squares", "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"}
{"task_id": "KR_HumanEval/143", "prompt": "def words_in_sentence(sentence):\n    \"\"\"\n    \ubb38\uc7a5\uc744 \ub098\ud0c0\ub0b4\ub294 \ubb38\uc790\uc5f4\uc774 \uc8fc\uc5b4\uc9c0\uace0,\n    \uadf8 \ubb38\uc7a5\uc5d0\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ub2e8\uc5b4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba70,\n    \uae38\uc774\uac00 \uc18c\uc218\uc778 \uc6d0\ub798 \ubb38\uc7a5\uc758 \ub2e8\uc5b4\uac00 \ud3ec\ud568\ub41c \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud574\uc57c \ud558\uba70,\n    \uc0c8 \ubb38\uc790\uc5f4\uc758 \ub2e8\uc5b4 \uc21c\uc11c\ub294 \uc6d0\ub798 \ubb38\uc790\uc5f4\uacfc \ub3d9\uc77c\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n    \uc608\uc81c 1:\n        \uc785\ub825: sentence = \"This is a test\"\n        \ucd9c\ub825 \"is\"\n\n    \uc608 2:\n        \uc785\ub825: sentence = \"lets go for swimming\"\n        \ucd9c\ub825 \ucd9c\ub825: \"go for\"\n\n    \uc81c\uc57d \uc870\uac74:\n        * 1 <= len(sentence) <= 100\n        * \ubb38\uc7a5\uc740 \ubb38\uc790\ub4e4\ub9cc \ud3ec\ud568\n    \"\"\"", "entry_point": "words_in_sentence", "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"}
{"task_id": "KR_HumanEval/144", "prompt": "def simplify(x, n):\n    \"\"\"\uc5ec\ub7ec\ubd84\uc758 \uacfc\uc81c\ub294 x * n \uc2dd\uc744 \ub2e8\uc21c\ud654\ud558\ub294 \ud568\uc218\ub97c \uad6c\ud604\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \uc774 \ud568\uc218\ub294 x * n\uc774 \uc815\uc218\ub85c \ud3c9\uac00\ub418\uba74 True\ub97c \ubc18\ud658\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    x\uc640 n\uc740 \ubaa8\ub450 \ubd84\uc218\uc758 \ubb38\uc790\uc5f4 \ud45c\ud604\uc774\uba70, \ubd84\uc790\uc640 \ubd84\ubaa8\uac00 \ubaa8\ub450 \uc591\uc758 \uc815\uc218\uc778 <\ubd84\uc790>/<\ubd84\ubaa8> \ud615\uc2dd\uc744 \uac16\uc2b5\ub2c8\ub2e4.\n\n    x\uc640 n\uc740 \uc720\ud6a8\ud55c \ubd84\uc218\uc774\uba70 \ubd84\ubaa8\uc5d0 0\uc774 \uc5c6\ub2e4\uace0 \uac00\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"", "entry_point": "simplify", "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n"}
{"task_id": "KR_HumanEval/145", "prompt": "def order_by_points(nums):\n    \"\"\"\n    \uc8fc\uc5b4\uc9c4 \uc815\uc218 \ubaa9\ub85d\uc744 \uc790\ub9bf\uc218\uc758 \ud569\uc5d0 \ub530\ub77c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \ucc38\uace0: \uc790\ub9bf\uc218\uc758 \ud569\uc774 \ube44\uc2b7\ud55c \ud56d\ubaa9\uc774 \uc5ec\ub7ec \uac1c \uc788\ub294 \uacbd\uc6b0 \uc6d0\ub798 \ubaa9\ub85d\uc758 \uc778\ub371\uc2a4\uc5d0 \ub530\ub77c \uc815\ub82c\ud569\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"", "entry_point": "order_by_points", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/146", "prompt": "def specialFilter(nums):\n    \"\"\"\uc22b\uc790 \ubc30\uc5f4\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc544 \ubc30\uc5f4\uc5d0\uc11c 10\ubcf4\ub2e4 \ud06c\uace0 \uc22b\uc790\uc758 \uc55e\uc790\ub9ac\uc640 \ub4b7\uc790\ub9ac\uac00 \ubaa8\ub450 \ud640\uc218(1, 3, 5, 7, 9)\uc778 \uc694\uc18c\uc758 \uc218\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"", "entry_point": "specialFilter", "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"}
{"task_id": "KR_HumanEval/147", "prompt": "def get_max_triples(n):\n    \"\"\"\n    \uc591\uc758 \uc815\uc218 n\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uae38\uc774 n\uc758 \uc815\uc218 \ubc30\uc5f4 a\ub97c \ub9cc\ub4e4\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n        \uac01 i (1 \u2264 i \u2264 n)\uc5d0 \ub300\ud574 a[i] = i * i - i + 1\uc758 \uac12\uc744 \uad6c\ud569\ub2c8\ub2e4.\n        a\uc758 \ud2b8\ub9ac\ud50c \uc218(a[i], a[j], a[k])\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4 (\uc5ec\uae30\uc11c i < j < k),\n    \uadf8\ub9ac\uace0 a[i] + a[j] + a[k]\ub294 3\uc758 \ubc30\uc218\uc785\ub2c8\ub2e4.\n\n    \uc608\uc81c :\n        \uc785\ub825: n = 5\n        \ucd9c\ub825: 1\n        \uc124\uba85:\n        a = [1, 3, 7, 13, 21]\n        \uc720\ud6a8\ud55c \uc720\uc77c\ud55c \ud2b8\ub9ac\ud50c\uc740 (1, 7, 13)\uc785\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "get_max_triples", "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"}
{"task_id": "KR_HumanEval/148", "prompt": "def bf(planet1, planet2):\n    \"\"\"\n    \ud0dc\uc591\uacc4\uc5d0\ub294 \ud0dc\uc591\uc5d0 \uac00\uc7a5 \uac00\uae4c\uc6b4 \ud589\uc131\uc774 \uc218\uc131, \uadf8 \ub2e4\uc74c\uc774 \uae08\uc131, \uadf8 \ub2e4\uc74c\uc774 \uc9c0\uad6c, \ud654\uc131, \ubaa9\uc131, \ud1a0\uc131, \ucc9c\uc655\uc131, \ud574\uc655\uc131 \uc21c\uc73c\ub85c 8\uac1c\uc758 \ud589\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n    \ub450 \ud589\uc131 \uc774\ub984\uc744 \ud589\uc1311\uacfc \ud589\uc1312\ub77c\ub294 \ubb38\uc790\uc5f4\ub85c \ubc1b\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    \uc774 \ud568\uc218\ub294 \ud589\uc1311\uc758 \uada4\ub3c4\uc640 \ud589\uc1312\uc758 \uada4\ub3c4 \uc0ac\uc774\uc5d0 \uada4\ub3c4\uac00 \uc788\ub294 \ubaa8\ub4e0 \ud589\uc131\uc744 \ud3ec\ud568\ud558\ub294 \ud29c\ud50c\uc744 \ud0dc\uc591\uacfc\uc758 \uadfc\uc811\ub3c4\uc5d0 \ub530\ub77c \uc815\ub82c\ud558\uc5ec \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ud589\uc1311 \ub610\ub294 \ud589\uc1312\uac00 \uc62c\ubc14\ub978 \ud589\uc131 \uc774\ub984\uc774 \uc544\ub2cc \uacbd\uc6b0 \ud568\uc218\ub294 \ube48 \ud29c\ud50c\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \n    \uc608\uc81c\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"", "entry_point": "bf", "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"}
{"task_id": "KR_HumanEval/149", "prompt": "def sorted_list_sum(lst):\n    \"\"\"\ubb38\uc790\uc5f4 \ubaa9\ub85d\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uae38\uc774\uac00 \ud640\uc218\uc778 \ubb38\uc790\uc5f4\uc744 \uc0ad\uc81c\ud558\uace0 \uc815\ub82c\ub41c \uc21c\uc11c\ub85c \uacb0\uacfc \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.\n    \ubaa9\ub85d\uc740 \ud56d\uc0c1 \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc774\uba70 \uc22b\uc790\uc758 \ubc30\uc5f4\uc774 \uc544\ub2c8\uba70 \uc911\ubcf5\uc774 \ud3ec\ud568\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    \ubaa9\ub85d\uc758 \uc21c\uc11c\ub294 \uac01 \ub2e8\uc5b4\uc758 \uae38\uc774\uc5d0 \ub530\ub77c \uc624\ub984\ucc28\uc21c\uc774\uc5b4\uc57c \ud558\uba70, \ud574\ub2f9 \uaddc\uce59\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \ubaa9\ub85d\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ub450 \ub2e8\uc5b4\uc758 \uae38\uc774\uac00 \uac19\uc740 \uacbd\uc6b0 \ubaa9\ub85d\uc744 \uc54c\ud30c\ubcb3\uc21c\uc73c\ub85c \uc815\ub82c\ud569\ub2c8\ub2e4.\n    \uc774 \ud568\uc218\ub294 \uc815\ub82c\ub41c \uc21c\uc11c\ub300\ub85c \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \ub2e8\uc5b4\uc758 \uae38\uc774\uac00 \uac19\ub2e4\uace0 \uac00\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"", "entry_point": "sorted_list_sum", "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"}
{"task_id": "KR_HumanEval/150", "prompt": "def x_or_y(n, x, y):\n    \"\"\"n\uc774 \uc18c\uc218\uc774\uba74 x\uc758 \uac12\uc744 \ubc18\ud658\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 y\uc758 \uac12\uc744 \ubc18\ud658\ud574\uc57c \ud558\ub294 \uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4.\n\n    \uc608\uc2dc\uc785\ub2c8\ub2e4:\n    FOR X_OR_Y(7, 34, 12) == 34\n    FOR X_OR_Y(15, 8, 5) == 5\n    \n    \"\"\"", "entry_point": "x_or_y", "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"}
{"task_id": "KR_HumanEval/151", "prompt": "def double_the_difference(lst):\n    \"\"\"\n    \uc22b\uc790 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc9c0\uba74 \ubaa9\ub85d\uc5d0 \uc788\ub294 \uc22b\uc790 \uc911 \ud640\uc218\uc778 \uc22b\uc790\uc758 \uc81c\uacf1\uc758 \ud569\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc74c\uc218\uc774\uac70\ub098 \uc815\uc218\uac00 \uc544\ub2cc \uc22b\uc790\ub294 \ubb34\uc2dc\ud569\ub2c8\ub2e4.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n   \n    \uc785\ub825 \ubaa9\ub85d\uc774 \ube44\uc5b4 \uc788\uc73c\uba74 0\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "double_the_difference", "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/152", "prompt": "def compare(game,guess):\n    \"\"\"\uc624\ub7ab\ub3d9\uc548 \uae30\ub2e4\ub824\uc628 \uc774\ubca4\ud2b8\uc758 \uacb0\uacfc\uac00 \ub9c8\uce68\ub0b4 \uc54c\ub824\uc84c\uc744 \ub54c\uc758 \uadf8 \uae30\ubd84\uc740 \ub204\uad6c\ub098 \uae30\uc5b5\ud560 \uac83\uc785\ub2c8\ub2e4\n    \uadf8 \uc21c\uac04\uc758 \uac10\uc815\uacfc \uc0dd\uac01\uc740 \ubd84\uba85 \uae30\ub85d\ud574\ub450\uace0 \ube44\uad50\ud560 \uac00\uce58\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n    \uc5ec\ub7ec\ubd84\uc758 \uc784\ubb34\ub294 \ud55c \uc0ac\ub78c\uc774 \uc5ec\ub7ec \uacbd\uae30\uc758 \uacb0\uacfc\ub97c \uc62c\ubc14\ub974\uac8c \ucd94\uce21\ud588\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n    \ub3d9\uc77c\ud55c \uae38\uc774\uc758 \uc810\uc218\uc640 \ucd94\uce21\uc758 \ub450 \ubc30\uc5f4\uc774 \uc8fc\uc5b4\uc9c0\uba70, \uac01 \uc778\ub371\uc2a4\uc5d0\ub294 \uc77c\uce58\ud558\ub294 \ud56d\ubaa9\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4.\n    \uac01 \ucd94\uce21\uc774 \uc5bc\ub9c8\ub098 \ud2c0\ub838\ub294\uc9c0\ub97c \ub098\ud0c0\ub0b4\ub294 \ub3d9\uc77c\ud55c \uae38\uc774\uc758 \ubc30\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc62c\ubc14\ub974\uac8c \ucd94\uce21\ud55c \uacbd\uc6b0 \uac12\uc740 0\uc774\uace0, \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uac12\uc740 \ucd94\uce21\uacfc \uc810\uc218\uc758 \uc808\ub300\uc801\uc778 \ucc28\uc774\uc785\ub2c8\ub2e4.\n    \n    \n    \uc608\uc2dc:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"", "entry_point": "compare", "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/153", "prompt": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\ud074\ub798\uc2a4 \uc774\ub984(\ubb38\uc790\uc5f4)\uacfc \ud655\uc7a5\uc790 \ubaa9\ub85d\uc774 \uc81c\uacf5\ub429\ub2c8\ub2e4.\n    \ud655\uc7a5\uc740 \ud074\ub798\uc2a4\uc5d0 \ucd94\uac00 \ud074\ub798\uc2a4\ub97c \ub85c\ub4dc\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n    \ud655\uc7a5\uc758 \uac15\ub3c4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: CAP\ub294 \ud655\uc7a5\uc790 \uc774\ub984\uc758 \ub300\ubb38\uc790 \uc218\uc774\uace0 SM\uc740 \ud655\uc7a5\uc790 \uc774\ub984\uc758 \uc18c\ubb38\uc790 \uc218\uc774\uba70, \uac15\ub3c4\ub294 CAP - SM\uc758 \ubd84\uc218\ub85c \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uac00\uc7a5 \uac15\ub825\ud55c \ud655\uc7a5\uba85\uc744 \ucc3e\uc544\uc11c \uc774 \ud615\uc2dd\uc758 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4: ClassName.StrongestExtensionName.\n    \uac19\uc740 \uac15\ub3c4\uc758 \ud655\uc7a5\uba85\uc774 \ub450 \uac1c \uc774\uc0c1 \uc788\ub294 \uacbd\uc6b0 \ubaa9\ub85d\uc5d0\uc11c \uac00\uc7a5 \uba3c\uc800 \uc624\ub294 \ud655\uc7a5\uba85\uc744 \uc120\ud0dd\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc608\ub97c \ub4e4\uc5b4 \ud074\ub798\uc2a4\ub85c 'Slices'\uc640 \ud655\uc7a5\uc790 \ubaa9\ub85d\uc774 \uc8fc\uc5b4\uc84c\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: ['SErviNGSliCes', 'Cheese', 'StuFfed']\uc778 \uacbd\uc6b0 'SErviNGSliCes'\uac00 \uac00\uc7a5 \uac15\ub825\ud55c \ud655\uc7a5\uc790\uc774\ubbc0\ub85c(\uac15\ub3c4\ub294 -1\uc784) 'Slices.SErviNGSliCes'\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc608\uc81c:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"", "entry_point": "Strongest_Extension", "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"}
{"task_id": "KR_HumanEval/154", "prompt": "def cycpattern_check(a , b):\n    \"\"\"\ub450 \ub2e8\uc5b4\uac00 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \ub2e8\uc5b4 \ub610\ub294 \uadf8 \ud68c\uc804\uc774 \uccab \ubc88\uc9f8 \ub2e8\uc5b4\uc758 \ud558\uc704 \ubb38\uc790\uc5f4\uc778 \uacbd\uc6b0 True\ub97c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"eef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"", "entry_point": "cycpattern_check", "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"}
{"task_id": "KR_HumanEval/155", "prompt": "def even_odd_count(num):\n    \"\"\"\uc815\uc218\uac00 \uc8fc\uc5b4\uc9c0\uba74 \uac01\uac01 \uc9dd\uc218\uc640 \ud640\uc218 \uc790\ub9bf\uc218\ub97c \uac00\uc9c4 \ud29c\ud50c\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n     \uc608\uc81c:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"", "entry_point": "even_odd_count", "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/156", "prompt": "def int_to_mini_roman(number):\n    \"\"\"\n    \uc591\uc758 \uc815\uc218\uac00 \uc8fc\uc5b4\uc9c0\uba74, \uadf8 \uc815\uc218\uc5d0 \ud574\ub2f9\ud558\ub294 \ub85c\ub9c8 \uc22b\uc790\ub97c \ubb38\uc790\uc5f4\ub85c \uad6c\ud55c \ub2e4\uc74c \uc18c\ubb38\uc790\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc81c\ud55c \uc0ac\ud56d: 1 <= num <= 1000\n\n    \uc608\uc81c\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"", "entry_point": "int_to_mini_roman", "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    \uc0bc\uac01\ud615\uc758 \uc138 \ubcc0\uc758 \uae38\uc774\uac00 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uc138 \ubcc0\uc774 \uc9c1\uac01 \uc0bc\uac01\ud615\uc744 \uc774\ub8e8\uba74 \ucc38\uc744 \ubc18\ud658\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uac70\uc9d3\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc9c1\uac01 \uc0bc\uac01\ud615\uc740 \ud55c \ubcc0\uc758 \uac01\ub3c4\uac00 \uc9c1\uac01 \ub610\ub294 90\ub3c4\uc778 \uc0bc\uac01\ud615\uc785\ub2c8\ub2e4.\n    \"\"\"", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"}
{"task_id": "KR_HumanEval/158", "prompt": "def find_max(words):\n    \"\"\"\ubb38\uc790\uc5f4 \ubaa9\ub85d\uc744 \ubc1b\uc544\ub4e4\uc774\ub294 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. \ubaa9\ub85d\uc5d0 \ub2e4\ub978 \ub2e8\uc5b4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n    \ucd5c\ub300 \uace0\uc720 \ubb38\uc790 \uc218\ub97c \uac00\uc9c4 \ub2e8\uc5b4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n    \uc5ec\ub7ec \ubb38\uc790\uc5f4\uc5d0 \ucd5c\ub300 \uace0\uc720 \ubb38\uc790 \uc218\uac00 \uc788\ub294 \uacbd\uc6b0 \uc0ac\uc804\uc801 \uc21c\uc11c\ub85c \uba3c\uc800 \uc624\ub294 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"", "entry_point": "find_max", "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"}
{"task_id": "KR_HumanEval/159", "prompt": "def eat(number, need, remaining):\n    \"\"\"\n    \ub2f9\uc2e0\uc740 \ubc30\uace0\ud508 \ud1a0\ub07c\uc774\uace0 \uc774\ubbf8 \uc77c\uc815 \uc218\uc758 \ub2f9\uadfc\uc744 \uba39\uc5c8\uc9c0\ub9cc \uc774\uc81c \ud558\ub8e8\uc758 \uc2dd\uc0ac\ub97c \uc644\ub8cc\ud558\ub824\uba74 \ub354 \ub9ce\uc740 \ub2f9\uadfc\uc744 \uba39\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n    [\uc2dd\uc0ac \ud6c4 \uba39\uc740 \ub2f9\uadfc\uc758 \ucd1d \uac1c\uc218, \uc2dd\uc0ac \ud6c4 \ub0a8\uc740 \ub2f9\uadfc\uc758 \uac1c\uc218]\uc758 \ubc30\uc5f4\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \ub0a8\uc740 \ub2f9\uadfc\uc774 \ucda9\ubd84\ud558\uc9c0 \uc54a\uc73c\uba74 \ub0a8\uc740 \ub2f9\uadfc\uc744 \ubaa8\ub450 \uba39\uc9c0\ub9cc \uc5ec\uc804\ud788 \ubc30\uac00 \uace0\ud504\uac8c \ub429\ub2c8\ub2e4.\n    \n    \uc608\uc2dc:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    \ubcc0\uc218\n    @number: \uc815\uc218\n        \uba39\uc740 \ub2f9\uadfc\uc758 \uac1c\uc218\uc785\ub2c8\ub2e4.\n    @need: \uc815\uc218\n        \uba39\uc5b4\uc57c \ud558\ub294 \ub2f9\uadfc\uc758 \uac1c\uc218\uc785\ub2c8\ub2e4.\n    @remaining: \uc815\uc218\n        \uc7ac\uace0\ub85c \ub0a8\uc740 \ub2f9\uadfc \uac1c\uc218\uc785\ub2c8\ub2e4\n    \n    \uc81c\uc57d \uc870\uac74:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    \uc990\uac70\uc6b4 \uc2dc\uac04 \ubcf4\ub0b4\uc138\uc694 :)\n    \"\"\"", "entry_point": "eat", "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"}
{"task_id": "KR_HumanEval/160", "prompt": "def do_algebra(operator, operand):\n    \"\"\"\n    \uc5f0\uc0b0\uc790\uc640, \ud53c\uc5f0\uc0b0\uc790 \ub450 \uac1c\uc758 \ub9ac\uc2a4\ud2b8\uac00 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    \uccab \ubc88\uc9f8 \ubaa9\ub85d\uc5d0\ub294 \uae30\ubcf8 \ub300\uc218 \uc5f0\uc0b0\uc774 \uc788\uace0 \ub450 \ubc88\uc9f8 \ubaa9\ub85d\uc740 \uc815\uc218\uc758 \ubaa9\ub85d\uc785\ub2c8\ub2e4.\n    \uc8fc\uc5b4\uc9c4 \ub450 \ubaa9\ub85d\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub300\uc218 \uc2dd\uc744 \uc791\uc131\ud558\uace0 \uc774 \uc2dd\uc758 \ud3c9\uac00\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uae30\ubcf8 \ub300\uc218 \uc5f0\uc0b0\n    \ub354\ud558\uae30 ( + )\n    \ube7c\uae30 ( - )\n    \uacf1\uc148 ( * )\n    \ub098\ub217\uc148 \ubaab ( // )\n    \uc9c0\uc218 \uc2b9 ( ** )\n\n    \uc608\uc2dc\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    \uacb0\uacfc = 2 + 3 * 4 - 5\n    => \uacb0\uacfc = 9\n\n    \ucc38\uace0:\n        \uc5f0\uc0b0\uc790 \ubaa9\ub85d\uc758 \uae38\uc774\ub294 \ud53c\uc5f0\uc0b0\uc790 \ubaa9\ub85d\uc758 \uae38\uc774\uc5d0\uc11c 1\uc744 \ube80 \uac12\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n        \ud53c\uc5f0\uc0b0\uc790\ub294 \uc74c\uc218\uac00 \uc544\ub2cc \uc815\uc218\uc758 \ubaa9\ub85d\uc785\ub2c8\ub2e4.\n        \uc5f0\uc0b0\uc790 \ubaa9\ub85d\uc5d0\ub294 \uc801\uc5b4\ub3c4 \ud558\ub098\uc758 \uc5f0\uc0b0\uc790\uac00 \uc788\uace0 \ud53c\uc5f0\uc0b0\uc790 \ubaa9\ub85d\uc5d0\ub294 \uc801\uc5b4\ub3c4 \ub450 \uac1c\uc758 \ud53c\uc5f0\uc0b0\uc790\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\n    \"\"\"", "entry_point": "do_algebra", "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "KR_HumanEval/161", "prompt": "def solve(s):\n    \"\"\"\ubb38\uc790\uc5f4 s\uac00 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n    s[i]\uac00 \ubb38\uc790\uc778 \uacbd\uc6b0 \ub300\uc18c\ubb38\uc790\ub97c \uc544\ub798\uc5d0\uc11c \uc704\ub85c \ub610\ub294 \uadf8 \ubc18\ub300\ub85c \ubc14\uafb8\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uadf8\ub300\ub85c \uc720\uc9c0\ud569\ub2c8\ub2e4.\n    \ubb38\uc790\uc5f4\uc5d0 \ubb38\uc790\uac00 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \ubb38\uc790\uc5f4\uc744 \ubc18\uc804\uc2dc\ud0b5\ub2c8\ub2e4.\n    \ud568\uc218\ub294 \uacb0\uacfc \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n    \uc608\uc81c\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"}
{"task_id": "KR_HumanEval/162", "prompt": "def string_to_md5(text):\n    \"\"\"\n    \ubb38\uc790\uc5f4 'text'\uac00 \uc8fc\uc5b4\uc9c0\uba74 \ud574\ub2f9 \ubb38\uc790\uc5f4\uc758 md5 \ud574\uc2dc \ub4f1\uac00 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    'text'\uac00 \ube48 \ubb38\uc790\uc5f4\uc774\uba74 None\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"", "entry_point": "string_to_md5", "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "KR_HumanEval/163", "prompt": "def generate_integers(a, b):\n    \"\"\"\n    \ub450 \uac1c\uc758 \uc591\uc758 \uc815\uc218 a\uc640 b\uac00 \uc8fc\uc5b4\uc9c0\uba74, a\uc640 b \uc0ac\uc774\uc758 \uc9dd\uc218\ub4e4\uc744 \uc624\ub984\ucc28\uc21c\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n\n    \uc608\ub97c \ub4e4\uc5b4\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"", "entry_point": "generate_integers", "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
